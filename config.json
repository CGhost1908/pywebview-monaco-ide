{
    "directory": "C:\\Users\\Eren\\Desktop\\pywebview-monaco-ide",
    "explorer": true,
    "current_file": {
        "name": "code.js",
        "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/code.js"
    },
    "bottom_files": [
        {
            "name": "main.py",
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/main.py"
        },
        {
            "name": "code.js",
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/code.js"
        },
        {
            "name": "language.js",
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/language.js"
        },
        {
            "name": "bring-file.js",
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/bring-file.js"
        },
        {
            "name": "ai.js",
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/ai.js"
        },
        {
            "name": "ai_deneme.html",
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/ai_deneme.html"
        },
        {
            "name": "index.html",
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/index.html"
        }
    ],
    "editors": [
        {
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/main.py",
            "content": "import webview\nimport os\nimport time\nimport threading\nimport base64\nfrom webview.dom import DOMEventHandler\nimport json\nfrom bs4 import BeautifulSoup\nfrom PyQt5.QtCore import QFileSystemWatcher, QCoreApplication\nimport sys\nimport subprocess\nimport asyncio\nimport websockets\nimport chardet\nfrom watchdog.events import FileSystemEvent, FileSystemEventHandler, FileMovedEvent\nfrom watchdog.observers import Observer\n\nimport requests\n\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nimport torch\nfrom google import generativeai as genai\nfrom transformers import pipeline\nfrom llama_cpp import Llama\nfrom transformers import LlamaForCausalLM, LlamaTokenizer\nfrom google.cloud import aiplatform\nfrom google import genai\n\nclient = genai.Client(api_key=\"AIzaSyAGmGlCZm8QQQe9jdOxpjBlnrCmeqJJ7NM\")\n\nCONFIG_FILE = \"config.json\"\n\nprocess = None\nreader_task = None\n\nasync def read_output(process, websocket, path):\n    try:\n        while True:\n            line = await asyncio.get_event_loop().run_in_executor(None, process.stdout.readline)\n            if not line:\n                break\n            await websocket.send(json.dumps({\"response\": f\"{line.rstrip()}\\n\"}))\n    except Exception as e:\n        await websocket.send(json.dumps({\"response\": f\"Read error: {str(e)}\"}))\n\nasync def websocket_handler(websocket):\n    global process, reader_task\n    path = api.get_directory()\n\n    async for message in websocket:\n        command = message.strip()\n\n        try:\n            if command.lower().startswith('cd '):\n                new_dir = command[3:].strip()\n                new_path = os.path.abspath(os.path.join(path, new_dir))\n\n                if os.path.exists(new_path) and os.path.isdir(new_path):\n                    path = new_path\n                    result_output = f\"{path}\\\\\"\n                else:\n                    result_output = f\"Error: The directory {new_path} does not exist.\\n{path}\\\\\"\n\n                await websocket.send(json.dumps({\"response\": result_output}))\n\n            elif command.lower() == 'terminate':\n                if process and process.poll() is None:\n                    process.kill()\n                    await websocket.send(json.dumps({\"response\": \"Process terminated.\"}))\n                else:\n                    await websocket.send(json.dumps({\"response\": \"No running process to terminate.\"}))\n\n            else:\n                env = os.environ.copy()\n                env[\"PYTHONUNBUFFERED\"] = \"1\" \n\n                process = subprocess.Popen(\n                    command,\n                    shell=True,\n                    cwd=path,\n                    stdin=subprocess.PIPE,\n                    stdout=subprocess.PIPE,\n                    stderr=subprocess.STDOUT,\n                    text=True,\n                    env=env\n                )\n\n                reader_task = asyncio.create_task(read_output(process, websocket, path))\n\n                await asyncio.get_event_loop().run_in_executor(None, process.wait)\n                await reader_task\n                await websocket.send(json.dumps({\"response\": f\"\\n{path}\\\\\"}))\n\n        except Exception as e:\n            await websocket.send(json.dumps({\"response\": f\"Error: {str(e)}\"}))\n\ndef start_server():\n    async def server_main():\n        global server\n        print(\"WebSocket server started on ws://localhost:8765\")\n        server = await websockets.serve(websocket_handler, \"localhost\", 8765)\n        await asyncio.Future()\n\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    loop.run_until_complete(server_main())\n\n\ndef stop_server():\n    if server:\n        print(\"Stopping server...\")\n        server.close()\n        asyncio.run(server.wait_closed())\n\n\ndef on_drag(e):\n    pass\n\ndef on_drop(e):\n    files = e['dataTransfer']['files']\n    if len(files) != 0:\n        dropped_files = []\n        dropped_folders = []\n\n        for file in files:\n            full_path = file.get('pywebviewFullPath')\n            if os.path.isfile(full_path):\n                file_name = file.get('name')\n                dropped_files.append({\n                    'name': file_name,\n                    'directory': full_path\n                })\n            else:\n                dropped_folders.append(full_path)   \n\n    webview.windows[0].evaluate_js(f\"openDroppedItems({dropped_folders}, {dropped_files})\")\n\ndef bind(window):\n    for window in webview.windows:\n        elements = window.dom.get_elements('.content')\n        if elements:\n            elements[0].events.dragenter += DOMEventHandler(on_drag, True, True)\n            elements[0].events.dragstart += DOMEventHandler(on_drag, True, True)\n            elements[0].events.dragover += DOMEventHandler(on_drag, True, True, debounce=500)\n            elements[0].events.drop += DOMEventHandler(on_drop, True, True)\n\n\n#Directory Observer\ndirectoryObserver = None\n\nclass DirectoryWatcher(FileSystemEventHandler):\n    def on_created(self, event):\n        webview.windows[0].evaluate_js(\"loadExplorer()\")\n\n    def on_deleted(self, event):\n        webview.windows[0].evaluate_js(\"loadExplorer()\")\n\n    def on_moved(self, event):\n        webview.windows[0].evaluate_js(\"loadExplorer()\")\n\ndef watch_directory(path):\n    global directoryObserver\n\n    if directoryObserver:\n        directoryObserver.stop()\n        directoryObserver.join()\n\n    event_handler = DirectoryWatcher()\n    directoryObserver = Observer()\n    directoryObserver.schedule(event_handler, path, recursive=True)\n    directoryObserver.daemon = True\n    directoryObserver.start()\n\n\n#File Observer\nfileObserver = Observer()\nfileObserver.daemon = True\nfileObserver.start()\n\nclass FileWatcher(FileSystemEventHandler):\n    def __init__(self, file_path):\n        self.file_path = os.path.abspath(file_path)\n\n    def on_modified(self, event):\n        if os.path.abspath(event.src_path) == self.file_path:\n            path = os.path.normpath(self.file_path)\n            path = path.replace(\"\\\\\", \"\\\\\\\\\")\n            webview.windows[0].evaluate_js(f\"compareContent('{path}')\")\n\ndef watch_file(file_path):\n    folder = os.path.dirname(file_path)\n    handler = FileWatcher(file_path)\n    fileObserver.schedule(handler, path=folder, recursive=False)\n\n\nclass API:\n    def __init__(self):\n        self.config = self.load_config()\n\n    def minimize(self):\n        webview.windows[0].minimize()\n\n    def maximize(self):\n        webview.windows[0].toggle_fullscreen()\n\n    def close(self):\n        webview.windows[0].destroy()\n\n    def move(self, x, y):\n        webview.windows[0].move(x, y)\n\n    def get_window_info(self):\n        win = webview.windows[0]\n        return {'x': win.x, 'y': win.y, 'width': win.width, 'height': win.height}\n\n    def resize_and_move(self, x, y, width, height):\n        win = webview.windows[0]\n        win.move(x, y)\n        win.resize(width, height)\n    \n    def get_files(self, directory):\n        try:\n            files = os.listdir(directory)\n            return files\n        except FileNotFoundError:\n            return []\n        \n    def is_file(self, path):\n        return os.path.isfile(path)\n\n    def reload(self):\n        window = webview.windows[0]\n        threading.Thread(target=start, daemon=True).start()\n        window.destroy()\n\n    def read_file(self, path):\n        if not os.path.exists(path):\n            print('not exist')\n            return False\n        try:\n            with open(path, 'r', encoding='utf-8') as f:\n                content = f.read()\n                if not content:\n                    return 'void'\n                return content\n        except UnicodeDecodeError:\n            return 'unsupport'\n        \n    def send_image(self, path):\n        with open(path, \"rb\") as image_file:\n            return base64.b64encode(image_file.read()).decode('utf-8')\n        \n    def load_config(self):\n        if os.path.exists(CONFIG_FILE):\n            with open('config.json', 'r', encoding='utf-8') as f:\n                return json.load(f)\n        return {}\n\n    def save_config(self):\n        with open(CONFIG_FILE, 'w') as f:\n            json.dump(self.config, f, indent=4)\n\n    def get_directory(self):\n        if \"directory\" in self.config:\n            watch_directory(self.config[\"directory\"])\n            return self.config[\"directory\"]\n        else:\n            desktop_path = os.path.join(os.path.expanduser(\"~\"), \"Desktop\")\n            self.config[\"directory\"] = desktop_path\n            self.save_config()\n            watch_directory(desktop_path)\n            return desktop_path\n        \n    def set_directory(self, directory):\n        self.config[\"directory\"] = directory\n        self.save_config()\n        watch_directory(directory)\n\n    def save_explorer(self, display):\n        if display == \"flex\":\n            self.config[\"explorer\"] = True\n        else:\n            self.config[\"explorer\"] = False\n        self.save_config()\n    \n    def get_explorer(self):\n        if \"explorer\" in self.config:\n            return self.config[\"explorer\"]      \n\n    def save_bottom_files(self, files):\n        self.config[\"bottom_files\"] = files\n        self.save_config()\n\n    def get_bottom_files(self):\n        if \"bottom_files\" in self.config:\n            return self.config[\"bottom_files\"]\n        else:\n            return []\n        \n    def set_current_file(self, name, directory):\n        self.config[\"current_file\"] = {'name': name, 'directory': directory}\n        self.save_config()\n\n    def get_current_file(self):\n        if \"current_file\" in self.config:\n            return self.config[\"current_file\"]   \n\n    def set_anchor_file(self, anchor):\n        self.config[\"anchor_file\"] = anchor\n        self.save_config()\n         \n    def get_anchor_file(self):\n         if \"anchor_file\" in self.config:\n            return self.config[\"anchor_file\"]\n        \n    def save_file(self, directory, content):\n        if not os.path.exists(directory):\n            os.makedirs(os.path.dirname(directory), exist_ok=True)\n        with open(directory, 'w', encoding='utf-8') as f:\n            f.write(content)\n        return True\n    \n    def start_server(self):\n        threading.Thread(target=start_server, daemon=True).start()\n\n    def stop_server(self):\n        stop_server()\n\n    def watch_file(self, path):\n        watch_file(path)\n\n    def save_editors(self, editors):\n        self.config[\"editors\"] = editors\n        self.save_config()\n\n    def get_editors(self):\n        if \"editors\" in self.config:\n            return self.config[\"editors\"]\n        \n    def set_ai_api_key(self, key):\n        self.config[\"ai_api_key\"] = key\n        self.save_config()\n\n    def get_ai_api_key(self):\n        if \"ai_api_key\" in self.config:\n            return self.config[\"ai_api_key\"]\n        \n    def set_ai_chat(self, history):\n        self.config[\"ai_chat\"] = history\n        self.save_config()\n\n    def get_ai_chat(self):\n        if \"ai_chat\" in self.config:\n            return self.config[\"ai_chat\"]\n        \n    def complete_code(self, prompt):\n        response = client.models.generate_content(\n            model=\"gemini-1.5-flash-8b\", contents=f\"Just write the rest of your code without any comment as text not code block: {prompt}\"\n        )\n        return response.text\n    \n    def answer_prompt(self, history):\n        response = client.models.generate_content(\n            model=\"gemini-1.5-flash-8b\",\n            contents=history\n        )\n        return response.text\n\n\napi = API()\n\ndef start():\n    window = webview.create_window(\n        'AI-Powered Code Editor',\n        'index.html',\n        frameless=True,\n        width=1280,\n        height=720,\n        min_size=(1280, 720),\n        resizable=True,\n        easy_drag=True,\n        js_api=api\n    )\n\n    webview.start(bind, window, debug=True)\n\nif __name__ == '__main__':\n    start()\n\n\n",
            "cursor": {
                "lineNumber": 83,
                "column": 34
            },
            "scrollTop": 0,
            "scrollLeft": 0
        },
        {
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/code.js",
            "content": "let editors = [];\nlet editorStates = [];\n\nfunction openEditor(directory, language, content){\n    let editor = null;\n    directory = normalizePath(directory);\n\n    require(['vs/editor/editor.main'], function() {\n\n        monaco.editor.defineTheme('custom', {\n            base: 'vs-dark',\n            inherit: true,\n            rules: [],\n            colors: {\n                \"activityBar.dropBorder\": \"#9039c7\",\n                \"activityBar.foreground\": \"#fff\",\n                \"activityBarBadge.background\": \"#4d057b\",\n                \"activityBarBadge.foreground\": \"#e7e7e7\",\n                \"badge.background\": \"#7d16bfa0\",\n                \"breadcrumb.activeSelectionForeground\": \"#ede4f1\",\n                \"breadcrumb.background\": \"#25013c\",\n                \"breadcrumb.focusForeground\": \"#ede4f1\",\n                \"breadcrumb.foreground\": \"#ede4f1\",\n                \"breadcrumbPicker.background\": \"#160024\",\n                \"button.background\": \"#7d16bf\",\n                \"button.hoverBackground\": \"#9039c7\",\n                \"button.secondaryBackground\": \"#5a068e80\",\n                \"button.secondaryHoverBackground\": \"#5a068e\",\n                \"contrastBorder\": \"#4d057b\",\n                \"debugToolBar.background\": \"#4d057b\",\n                \"diffEditor.border\": \"#4d057b\",\n                \"diffEditor.diagonalFill\": \"#d4d4d425\",\n                \"diffEditor.insertedTextBackground\": \"#00ff0028\",\n                \"diffEditor.removedTextBackground\": \"#ff000028\",\n                \"diffEditor.unchangedRegionBackground\": \"#25013c\",\n                \"diffEditor.unchangedRegionShadow\": \"#8818cd\",\n                \"diffEditor.unchangedRegionForeground\": \"#d4d4d4d0\",\n                \"dropdown.background\": \"#350354\",\n                \"dropdown.border\": \"#350354\",\n                \"dropdown.foreground\": \"#d4d4d4\",\n                \"dropdown.listBackground\": \"#350354\",\n                \"editor.findMatchBackground\": \"#7d16bf\",\n                \"editor.findMatchHighlightBackground\": \"#4d057be0\",\n                \"editor.findRangeHighlightBackground\": \"#4d057b50\",\n                \"editor.foreground\": \"#d4d4d4\",\n                \"editor.hoverHighlightBackground\": \"#4d057b80\",\n                \"editor.inactiveSelectionBackground\": \"#4d057b80\",\n                \"editor.lineHighlightBackground\": \"#25013Cb0\",\n                \"editor.rangeHighlightBackground\": \"#4d057ba0\",\n                \"editor.selectionBackground\": \"#1D022E\",\n                \"editor.selectionHighlightBackground\": \"#2F0F42FF\",\n                \"editor.wordHighlightBackground\": \"#1D022E\",\n                \"editor.wordHighlightStrongBackground\": \"#1D022E\",\n                \"editorBracketMatch.background\": \"#4d057b\",\n                \"editorBracketMatch.border\": \"#7d16bfb0\",\n                \"editorBracketHighlight.foreground1\": \"#ffd700\",\n                \"editorBracketHighlight.foreground2\": \"#da70d6\",\n                \"editorBracketHighlight.foreground3\": \"#179fff\",\n                \"editorBracketPairGuide.activeBackground1\": \"#ffd70090\",\n                \"editorBracketPairGuide.activeBackground2\": \"#da70d690\",\n                \"editorBracketPairGuide.activeBackground3\": \"#179fff90\",\n                \"editorBracketPairGuide.background1\": \"#ffd70040\",\n                \"editorBracketPairGuide.background2\": \"#da70d640\",\n                \"editorBracketPairGuide.background3\": \"#179fff40\",\n                \"editorCodeLens.foreground\": \"#9e85add0\",\n                \"editorCursor.foreground\": \"#b133ff\",\n                \"editorGroup.border\": \"#4d057b\",\n                \"editorGroup.dropBackground\": \"#9039c750\",\n                \"editorGroup.emptyBackground\": \"#160024\",\n                \"editorGroupHeader.noTabsBackground\": \"#25013c\",\n                \"editorGroupHeader.tabsBackground\": \"#25013c\",\n                \"editorGroupHeader.tabsBorder\": \"#25013c\",\n                \"editorHoverWidget.background\": \"#350354\",\n                \"editorHoverWidget.border\": \"#4d057b\",\n                \"editorInlayHint.foreground\": \"#d4d4d460\",\n                \"editorInlayHint.background\": \"#b133ff10\",\n                \"editorIndentGuide.activeBackground\": \"#9e85ad32\",\n                \"editorIndentGuide.activeBackground1\": \"#9e85ad32\",\n                \"editorIndentGuide.background\": \"#9e85ad00\",\n                \"editorIndentGuide.background1\": \"#9e85ad00\",\n                \"editorLink.activeForeground\": \"#ba7dd9\",\n                \"editorMarkerNavigation.background\": \"#25013c\",\n                \"editorMarkerNavigationError.background\": \"#ff5a5a\",\n                \"editorMarkerNavigationWarning.background\": \"#5aac5a\",\n                \"editorOverviewRuler.border\": \"#160024\",\n                \"editorRuler.foreground\": \"#9e85ad20\",\n                \"editorStickyScroll.background\": \"#25013c\",\n                \"editorStickyScrollHover.background\": \"#4d057b60\",\n                \"editorStickyScroll.border\": \"#4d057ba0\",\n                \"editorStickyScroll.shadow\": \"#4d057b30\",\n                \"editorSuggestWidget.foreground\": \"#d4d4d4d0\",\n                \"editorSuggestWidget.background\": \"#25013c\",\n                \"editorSuggestWidget.border\": \"#4d057bb0\",\n                \"editorSuggestWidget.selectedBackground\": \"#4d057b\",\n                \"editorSuggestWidget.selectedForeground\": \"#d4d4d4\",\n                \"editorSuggestWidget.highlightForeground\": \"#ba7dd9\",\n                \"editorWhitespace.foreground\": \"#9e85ad32\",\n                \"editorWidget.background\": \"#4d057b\",\n                \"errorForeground\": \"#e86969\",\n                \"foreground\": \"#d4d4d4\",\n                \"input.background\": \"#350354\",\n                \"input.foreground\": \"#d4d4d4\",\n                \"input.placeholderForeground\": \"#d4d4d460\",\n                \"inputOption.activeBorder\": \"#7d16bf\",\n                \"list.activeSelectionBackground\": \"#4d057b\",\n                \"list.activeSelectionForeground\": \"#d4d4d4\",\n                \"list.deemphasizedForeground\": \"#d4d4d450\",\n                \"list.dropBackground\": \"#4d057b80\",\n                \"list.focusBackground\": \"#4d057b\",\n                \"list.focusForeground\": \"#d4d4d4\",\n                \"list.highlightForeground\": \"#ba7dd9\",\n                \"list.hoverBackground\": \"#4d057b80\",\n                \"list.hoverForeground\": \"#d4d4d4a0\",\n                \"list.inactiveFocusBackground\": \"#4d057b\",\n                \"list.inactiveSelectionBackground\": \"#4d057b80\",\n                \"list.inactiveSelectionForeground\": \"#d4d4d4\",\n                \"list.invalidItemForeground\": \"#e86969\",\n                \"menu.background\": \"#25013c\",\n                \"menu.border\": \"#4d057b\",\n                \"menu.foreground\": \"#fff\",\n                \"menu.selectionForeground\": \"#fff\",\n                \"menu.separatorBackground\": \"#4d057b\",\n                \"menubar.selectionBackground\": \"#25013c\",\n                \"menubar.selectionBorder\": \"#25013c\",\n                \"menubar.selectionForeground\": \"#fff\",\n                \"multiDiffEditor.border\": \"#4d057bb0\",\n                \"multiDiffEditor.headerBackground\": \"#25013c\",\n                \"notebook.cellBorderColor\": \"#4d057ba6\",\n                \"notebook.cellHoverBackground\": \"#4d057b40\",\n                \"notebook.cellStatusBarItemHoverBackground\": \"#4d057b60\",\n                \"notebook.cellToolbarSeparator\": \"#4d057b60\",\n                \"notebook.focusedEditorBorder\": \"#4d057b\",\n                \"notebook.focusedCellBorder\": \"#4d057b\",\n                \"notebook.focusedCellBackground\": \"#4d057b60\",\n                \"notebook.outputContainerBackgroundColor\": \"#25013c\",\n                \"notifications.background\": \"#4d057b\",\n                \"panel.background\": \"#25013c\",\n                \"panel.border\": \"#160024\",\n                \"panel.dropBorder\": \"#9039c7\",\n                \"panelSectionHeader.background\": \"#4d057b\",\n                \"panelTitle.activeBorder\": \"#7d16bf\",\n                \"panelTitle.inactiveForeground\": \"#e7e7e750\",\n                \"panelTitle.activeForeground\": \"#e7e7e7\",\n                \"peekView.border\": \"#4d057b\",\n                \"peekViewEditorStickyScroll.background\": \"#25013c\",\n                \"peekViewTitle.background\": \"#4d057b\",\n                \"peekViewResult.background\": \"#25013c\",\n                \"peekViewEditor.background\": \"#25013c80\",\n                \"peekViewEditor.matchHighlightBackground\": \"#4d057be0\",\n                \"peekViewEditorGutter.background\": \"#25013c80\",\n                \"peekViewResult.matchHighlightBackground\": \"#4d057be0\",\n                \"peekViewResult.selectionBackground\": \"#4d057b\",\n                \"pickerGroup.border\": \"#4d057b\",\n                \"pickerGroup.foreground\": \"#b884d2\",\n                \"progressBar.background\": \"#9039c7\",\n                \"quickInput.foreground\": \"#d4d4d4d0\",\n                \"quickInput.background\": \"#25013c\",\n                \"quickInputList.focusBackground\": \"#4d057b\",\n                \"quickInputList.focusForeground\": \"#d4d4d4\",\n                \"sash.hoverBorder\": \"#4d057b\",\n                \"scrollbar.shadow\": \"#160024\",\n                \"scrollbarSlider.activeBackground\": \"#7d16bfa0\",\n                \"scrollbarSlider.background\": \"#7d16bf50\",\n                \"scrollbarSlider.hoverBackground\": \"#7d16bf80\",\n                \"selection.background\": \"#9039c7\",\n                \"settings.checkboxBackground\": \"#350354\",\n                \"settings.checkboxBorder\": \"#350354\",\n                \"settings.dropdownBackground\": \"#350354\",\n                \"settings.dropdownBorder\": \"#350354\",\n                \"settings.headerForeground\": \"#d4d4d4\",\n                \"settings.numberInputBackground\": \"#350354\",\n                \"settings.numberInputBorder\": \"#350354\",\n                \"settings.textInputBackground\": \"#350354\",\n                \"settings.textInputBorder\": \"#350354\",\n                \"sideBar.background\": \"#25013c\",\n                \"sideBarSectionHeader.background\": \"#4d057b\",\n                \"statusBar.background\": \"#7d16bf\",\n                \"statusBar.border\": \"#7d16bf\",\n                \"statusBar.debuggingBackground\": \"#9716bf\",\n                \"statusBar.debuggingBorder\": \"#9716bf\",\n                \"statusBar.noFolderBackground\": \"#7d16bf\",\n                \"statusBarItem.remoteBackground\": \"#9333dc\",\n                \"statusBarItem.remoteForeground\": \"#ffffff\",\n                \"tab.activeBackground\": \"#7d16bf\",\n                \"tab.activeBorder\": \"#b133ff\",\n                \"tab.unfocusedActiveBorder\": \"#9039c7\",\n                \"tab.border\": \"#4d057b\",\n                \"tab.inactiveBackground\": \"#4d057b\",\n                \"tab.inactiveForeground\": \"#ffffff80\",\n                \"tab.unfocusedInactiveForeground\": \"#ffffff66\",\n                \"tab.unfocusedActiveForeground\": \"#ffffff80\",\n                \"terminal.background\": \"#160024\",\n                \"terminal.foreground\": \"#d4d4d4\",\n                \"terminalStickyScrollHover.background\": \"#4d057b60\",\n                \"textBlockQuote.background\": \"#d4d4d41a\",\n                \"textBlockQuote.border\": \"#d4d4d440\",\n                \"textCodeBlock.background\": \"#d4d4d41a\",\n                \"textLink.activeForeground\": \"#ba7dd9\",\n                \"textLink.foreground\": \"#ba7dd9\",\n                \"titleBar.activeBackground\": \"#7d16bf\",\n                \"titleBar.inactiveBackground\": \"#4d057b\",\n                \"widget.border\": \"#4d057b\",\n                \"widget.shadow\": \"#4d057b60\",\n                \"window.activeBorder\": \"#7d16bf\",\n                \"window.inactiveBorder\": \"#4d057b\",\n                'editor.background': '#00000000',\n                // 'editor.lineHighlightBackground': '#3f1e84',\n                'editor.focusBorder': 'none'\n            },\n        });\n    \n        editor = monaco.editor.create(document.querySelector(`.window[directory='${normalizePath(directory)}']`), {\n            value: content,\n            language: language,\n            theme: \"custom\",\n            automaticLayout: true,\n            focusBorder: false,\n            overviewRulerBorder: false,\n            readOnly: false,\n            folding: true,\n            minimap: {\n                enabled: false,\n            },\n            editorStickyScroll: false,\n            suggestOnTriggerCharacters: true,\n            tabCompletion: 'on',\n            parameterHints: {\n                enabled: false,\n            },\n            quickSuggestions: {\n                comments: true,\n                other: true,\n                strings: true,\n            },\n        });\n\n        editor.addAction({\n            id: 'complete-code-button',\n            label: 'Complete Code',\n            contextMenuGroupId: 'navigation',\n            contextMenuOrder: 1,\n            run: async function(ed) {\n                const currentPosition = editor.getPosition();\n                const model = editor.getModel();\n                const decorations = editor.getLineDecorations(currentPosition.lineNumber);\n\n                if (decorations.length > 0) {\n                    const range = model.getDecorationRange(decorations[0].id);\n                    if (range) {\n                        const newEndLineNumber = range.endLineNumber;\n\n                        const upperRange = new monaco.Range(\n                            range.startLineNumber,\n                            1,\n                            newEndLineNumber,\n                            range.endColumn\n                        );\n\n                        const selectedText = model.getValueInRange(upperRange);\n\n                        console.log(selectedText);\n\n                        const result = await window.pywebview.api.complete_code(selectedText);\n\n                        const selectionRange = new monaco.Range(\n                            currentPosition.lineNumber + 1,\n                            1,\n                            currentPosition.lineNumber + 1,\n                            1\n                        );\n\n                        model.pushEditOperations(\n                            [selectionRange],\n                            [{\n                                range: selectionRange,\n                                text: result + \"\\n\",\n                                forceMoveMarkers: true\n                            }],\n                            () => null\n                        );\n                    }\n                }\n            }\n        });\n\n        editor.addAction({\n            id: 'ask-to-ai-button',\n            label: 'Ask to AI',\n            contextMenuGroupId: 'navigation',\n            contextMenuOrder: 1,\n            run: function(ed) {\n                openChatPanel();\n            }\n        });\n        \n\n        editors.push({\n            directory: directory,\n            editor: editor\n        });\n\n        editorStates.push({\n            directory: directory,\n            content: editor.getValue(),\n            cursor: editor.getPosition(),\n            scrollTop: editor.getScrollTop(),\n            scrollLeft: editor.getScrollLeft(),\n        });\n\n        pywebview.api.save_editors(editorStates);\n\n        let timeout;\n\n        editor.onDidChangeModelContent(async (event) => {\n            document.querySelector(`.file-bottom[directory='${directory}'] .unsaved-sign`).style.opacity = '1';\n            document.querySelector(`.file-bottom[directory='${directory}']`).setAttribute('unsaved', '');\n\n            for (let i = 0; i < editorStates.length; i++) {\n                if (editorStates[i].directory === directory) {\n                    editorStates[i].content = editor.getValue();\n                    editorStates[i].cursor = editor.getPosition();\n                    editorStates[i].scrollTop = editor.getScrollTop();\n                    editorStates[i].scrollLeft = editor.getScrollLeft();\n                    pywebview.api.save_editors(editorStates);\n                    break;\n                }\n            }\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            timeout = setTimeout(() => {\n                const currentPosition = editor.getPosition();\n                const model = editor.getModel();\n                const decorations = editor.getLineDecorations(currentPosition.lineNumber);\n\n                if (decorations.length > 0) {\n                    const range = model.getDecorationRange(decorations[0].id);\n                    if (range) {\n                        const newEndLineNumber = range.endLineNumber;\n\n                        const upperRange = new monaco.Range(\n                            range.startLineNumber,\n                            1,\n                            newEndLineNumber,\n                            range.endColumn\n                        );\n\n                        const selectedText = model.getValueInRange(upperRange);\n\n                        // window.pywebview.api.answer_prompt(selectedText).then(response => {\n                        //     sendAnswerPopup(response);\n                        // });\n                    }\n                }\n            }, 2000); \n        });\n\n        editor.onDidChangeCursorPosition((e) => {\n            for(let i = 0; i < editorStates.length; i++) {\n                if(editorStates[i].directory === directory){\n                    editorStates[i].cursor = editor.getPosition();\n                    editorStates[i].scrollTop = editor.getScrollTop();\n                    editorStates[i].scrollLeft = editor.getScrollLeft();\n                    pywebview.api.save_editors(editorStates);\n                    break;\n                }\n            }\n        });\n          \n        // editor.onDidScrollChange((e) => {\n        //     for(let i = 0; i < editorStates.length; i++) {\n        //         if(editorStates[i].directory === directory){\n        //             editorStates[i].scrollTop = editor.getScrollTop();\n        //             editorStates[i].scrollLeft = editor.getScrollLeft();\n        //             pywebview.api.save_editors(editorStates);\n        //             break;\n        //         }\n        //     }\n        // });\n    });\n}",
            "cursor": {
                "lineNumber": 14,
                "column": 22
            },
            "scrollTop": 0,
            "scrollLeft": 0
        },
        {
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/language.js",
            "content": "\nfunction findLanguage(ext){\n    const map = {\n        js: \"javascript\",\n        jsx: \"javascript\",\n        ts: \"typescript\",\n        tsx: \"typescript\",\n        py: \"python\",\n        java: \"java\",\n        c: \"c\",\n        cpp: \"cpp\",\n        cs: \"csharp\",\n        rb: \"ruby\",\n        go: \"go\",\n        php: \"php\",\n        html: \"html\",\n        css: \"css\",\n        scss: \"scss\",\n        json: \"json\",\n        xml: \"xml\",\n        sh: \"shell\",\n        md: \"markdown\",\n        yaml: \"yaml\",\n        yml: \"yaml\",\n        sql: \"sql\",\n        swift: \"swift\",\n        kt: \"kotlin\",\n        rs: \"rust\",\n        dart: \"dart\",\n        txt: \"plaintext\",\n        h: \"c\",\n        hpp: \"cpp\", \n        vb: \"visualbasic\",\n        asm: \"assembly\",\n        lua: \"lua\",  \n        r: \"r\",\n        pl: \"perl\",  \n        sh: \"shell\",   \n        bat: \"batch\",    \n        csv: \"csv\",   \n        mdx: \"markdown\",    \n        json5: \"json\",\n        coffee: \"coffeescript\",  \n        elm: \"elm\",\n        sql: \"sql\",\n        vhdl: \"vhdl\",\n        yml: \"yaml\",  \n        tex: \"latex\",  \n        csv: \"csv\",  \n        xsl: \"xsl\",\n    };\n\n    return map[ext.toLowerCase()] || \"plaintext\";\n}\n",
            "cursor": {
                "lineNumber": 1,
                "column": 1
            },
            "scrollTop": 0,
            "scrollLeft": 0
        },
        {
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/bring-file.js",
            "content": "\nasync function bringFile(name, directory){\n    directory = normalizePath(directory);\n    checkBottomExistance(name, directory);\n\n    if(document.querySelector('.current-file')){\n        document.querySelector('.current-file').classList.remove('current-file');\n    }\n    document.querySelector(`.file-bottom[directory=\"${directory}\"]`).classList.add('current-file');\n\n    if(document.querySelector('.file-explorer.active')){\n        document.querySelector('.file-explorer.active').classList.remove('active');\n    }\n    if(document.querySelector(`.file-explorer[directory=\"${directory}\"]`)){\n        document.querySelector(`.file-explorer[directory=\"${directory}\"]`).classList.add('active');\n    }\n\n    pywebview.api.set_current_file(name, directory);\n\n    pywebview.api.watch_file(directory);\n    \n    const result = await pywebview.api.read_file(directory);\n\n    if(checkEditorExist(directory)){\n        document.querySelectorAll('.window').forEach(window => {\n            window.style.display = 'none';\n        });\n        // compareContent(directory);\n\n        document.querySelector(`.window[directory=\"${directory}\"]`).style.display = 'flex';\n    }else{\n        const result = await pywebview.api.read_file(directory);\n    \n        const createWindow = document.createElement('div');\n        createWindow.classList.add('window');\n        createWindow.setAttribute('directory', directory);\n    \n        document.querySelectorAll('.window').forEach(window => {\n            window.style.display = 'none';\n        });\n        createWindow.style.display = 'flex';\n        document.querySelector('.windows').appendChild(createWindow);\n    \n        if(result == 'void'){\n            openEditor(directory, findLanguage(name.split('.').pop().toLowerCase()), '');\n        }else if(result == 'unsupport'){\n            if (['jpg', 'jpeg', 'gif', 'png', 'ico', 'webp'].includes(name.split('.').pop().toLowerCase())){\n                const createImage = document.createElement('img');\n                const encodedImage = await pywebview.api.send_image(directory);\n                createImage.src = `data:image/jpeg;base64,${encodedImage}`;\n                createImage.classList.add('window-image');\n\n                createWindow.style.alignItems = 'center';\n                createWindow.style.justifyContent = 'center';\n\n                let scale = 1;\n                let isDragging = false;\n                let startX, startY, initialX = 0, initialY = 0;\n\n                createImage.style.cursor = 'grab';\n\n                createImage.addEventListener('wheel', function(event) {\n                    if (event.deltaY > 0) {\n                        scale /= 1.1;\n                    } else {\n                        scale *= 1.1;\n                    }\n                    createImage.style.scale = scale;\n                });\n\n                createImage.addEventListener('mousedown', function(event){\n                    event.preventDefault();\n                    if (event.target && event.target.classList.contains('window-image')) {\n                        isDragging = true;\n                        startX = event.clientX - initialX;\n                        startY = event.clientY - initialY;\n                        event.target.style.cursor = 'grabbing';\n                    }\n                });\n\n                createImage.addEventListener('mousemove', function(event) {\n                    if (isDragging) {\n                        initialX = event.clientX - startX;\n                        initialY = event.clientY - startY;\n                        createImage.style.transform = `translate(${initialX}px, ${initialY}px)`;\n                    }\n                });\n\n                createImage.addEventListener('mouseup', function(event) {\n                    isDragging = false;\n                    event.target.style.cursor = 'grab';\n                });\n\n                createImage.addEventListener('mouseleave', function(event) {\n                    if (isDragging) {\n                        isDragging = false;\n                        event.target.style.cursor = 'grab';\n                    }\n                });\n\n\n                createWindow.appendChild(createImage);\n            }else{\n                const createPopup = document.createElement('div');\n                createPopup.classList.add('window-popup');\n                const createPopupDecoration = document.createElement('div');\n                createPopupDecoration.classList.add('popup-decoration');\n                const createNav = document.createElement('nav');\n                createNav.classList.add('popup-nav');\n                const createDiv = document.createElement('div');\n                createDiv.classList.add('popup-div');\n                const createIcon = document.createElement('iconify-icon');\n                createIcon.setAttribute('icon', 'mage:file-cross-fill')\n                createIcon.classList.add('popup-icon');\n                const createTitle = document.createElement('p');\n                createTitle.classList.add('popup-title');\n                createTitle.textContent = 'Unsupported File Type'\n                const createText = document.createElement('p');\n                createText.classList.add('popup-text');\n                createText.textContent = 'Unfortunately, the file type you are trying to upload is not supported.'\n                const createButton = document.createElement('button');\n                createButton.classList.add('popup-button');\n\n                createPopup.appendChild(createPopupDecoration);\n\n                createPopup.appendChild(createNav);\n                createNav.appendChild(createIcon);\n\n                createDiv.appendChild(createTitle);\n                createDiv.appendChild(createText);\n                createNav.appendChild(createDiv);\n\n                createPopup.appendChild(createNav);\n\n                createButton.textContent = 'Close Tab';\n                createButton.onclick = function(){\n                    closeAllTabs();\n                }\n                createPopup.appendChild(createButton);\n\n                createWindow.style.alignItems = 'center';\n                createWindow.style.justifyContent = 'center';\n                createWindow.appendChild(createPopup);\n            }\n        }else if(result){\n            openEditor(directory, findLanguage(name.split('.').pop().toLowerCase()), result);\n        }\n    }\n}\n\nfunction checkBottomExistance(name, directory){\n    directory = normalizePath(directory);\n    if(!document.querySelector(`.file-bottom[directory=\"${normalizePath(directory)}\"]`)){\n        const createFileBottom = document.createElement('div');\n        createFileBottom.onclick = function(){\n            bringFile(name, directory);\n        };\n        createFileBottom.classList.add('file-bottom');\n        createFileBottom.setAttribute('directory', directory);\n        createFileBottom.setAttribute('name', name);\n        createFileBottom.setAttribute('title', normalizePath(directory));\n\n        const unsavedSign = document.createElement('iconify-icon');\n        unsavedSign.classList.add('unsaved-sign');\n        unsavedSign.setAttribute('icon', 'pepicons-print:circle-filled');\n\n        const createIcon = document.createElement('iconify-icon');\n        createIcon.classList.add('file-icon');\n        const ext = name.split('.').pop().toLowerCase();\n        createIcon.setAttribute('icon', getIconForExtension(ext));\n\n        const createFileName = document.createElement('p');\n        createFileName.classList.add('file-name-bottom');\n        createFileName.textContent = name;\n\n        createFileBottom.appendChild(createIcon);\n        createFileBottom.appendChild(createFileName);\n        createFileBottom.appendChild(unsavedSign);\n\n        createFileBottom.draggable = true;\n        bottomFiles.appendChild(createFileBottom);\n    }\n}\n \n\nfunction checkEditorExist(directory){\n    if(document.querySelector(`.window[directory='${normalizePath(directory)}']`)){\n        return true;\n    }else{\n        return false; \n    }\n}\n\n\nasync function compareContent(file){\n    file = normalizePath(file);\n    for(let i = 0; i < editors.length; i++){\n        if(editors[i].directory === file){\n            pywebview.api.read_file(file).then(function(content){\n                if(editors[i].editor.getValue() != content && !document.querySelector(`.file-bottom[directory='${file}']`).hasAttribute('unsaved')){\n                    editors[i].editor.setValue(content);\n                    document.querySelector(`.file-bottom[directory='${file}'] .unsaved-sign`).style.opacity = '0';\n                    document.querySelector(`.file-bottom[directory='${file}']`).removeAttribute('unsaved');\n                }\n            });\n            break;\n        }\n    }\n}\n\n\n",
            "cursor": {
                "lineNumber": 1,
                "column": 1
            },
            "scrollTop": 0,
            "scrollLeft": 0
        },
        {
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/ai.js",
            "content": "// const { editor } = require(\"monaco-editor\");\n\nconst apiPopup = document.querySelector('.api-popup');\n\nfunction saveAiApiKey(){\n    const input = document.querySelector('.api-popup input');\n    if(input.value){\n        pywebview.api.set_ai_api_key(input.value);\n        apiPopup.classList.remove('active-popup');\n        input.value = '';\n        document.querySelector('.ai-api-tick').style.opacity = '1';\n    }else{\n        input.classList.add(\"shake\");\n        setTimeout(() => {\n            input.classList.remove(\"shake\");\n        }, 400);\n    }\n    ai_api_key = pywebview.api.get_ai_api_key();\n}\n\nfunction openApiPopup(){\n    apiPopup.classList.add('active-popup');\n}\n\nfunction sendAnswerPopup(result){\n    console.log(result);\n    const popupDiv = document.querySelector('.answer-popups');\n\n    const popup = document.createElement('div');\n    popup.classList.add('answer-popup');\n    popup.innerHTML = result;\n    popup.style.animation = 'enterPopup 0.3s forwards';\n\n    // const textarea = document.createElement('div');\n    // textarea.classList.add('answer-popup-editor');\n    // textarea.value = result;\n    // popup.appendChild(textarea);\n\n    if(result){\n        popupDiv.querySelectorAll('.answer-popup').forEach(popup => {\n            popup.style.animation = 'slideIn 0.3s forwards';\n            setTimeout(() => {\n                popup.style.animation = '';\n            }, 300);\n        });\n    \n    \n        popupDiv.insertBefore(popup, popupDiv.firstChild);\n    }\n}\n\nconst answerPopups = document.querySelector('.answer-popups');\nlet timeout;\n\nanswerPopups.addEventListener('mouseenter', () => {\n    clearTimeout(timeout);\n    showAnswerPopups();\n});\n\nanswerPopups.addEventListener('mouseleave', () => {\n    timeout = setTimeout(() => {\n        answerPopups.style.opacity = '0';\n    }, 5000);\n});\n\n\nfunction showAnswerPopups(){\n    answerPopups.style.opacity = '1';\n}\n\nfunction chatPanelToLeft(button){\n    const content = document.querySelector('.content');\n    const chatWindow = document.querySelector('.chat-window');\n    const windows = document.querySelector('.windows');\n    content.insertBefore(chatWindow, windows);\n\n    document.querySelector('.ai-chat-panel-button.active').classList.remove('active');\n    button.classList.add('active');\n}\n\nfunction chatPanelToRight(button){\n    const content = document.querySelector('.content');\n    const chatWindow = document.querySelector('.chat-window');\n    const windows = document.querySelector('.windows');\n    content.insertBefore(windows, chatWindow);\n\n    document.querySelector('.ai-chat-panel-button.active').classList.remove('active');\n    button.classList.add('active');\n\n}\n\nfunction closeChatPanel(){\n    document.querySelector('.chat-window').style.display = 'none';\n}\n\nfunction openChatPanel(){\n    document.querySelector('.chat-window').style.display = 'flex';\n}\n\nfunction formatGeminiResponse(text) {\n    const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n\n    text = text.replace(/```c#/gi, '```csharp');\n    text = text.replace(/```c\\+\\+/gi, '```cpp');\n\n    const codeBlocks = [];\n    let replacedText = text.replace(codeBlockRegex, (match, lang = '', code) => {\n        const escapedCode = code\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n        const html = `<pre><code class=\"language-${lang}\">${escapedCode}</code></pre>`;\n        codeBlocks.push(html);\n        return `@@CODEBLOCK_${codeBlocks.length - 1}@@`;\n    });\n\n    const formattedText = replacedText\n        .split(/\\n{2,}/)\n        .map(block => {\n            const match = block.trim().match(/^@@CODEBLOCK_(\\d+)@@$/);\n            if (match) {\n                return codeBlocks[parseInt(match[1])];\n            }\n\n            return `<p>${block\n                .split('\\n')\n                .map(line =>\n                    line\n                        .replace(/\\*{5}(.*?)\\*{5}/g, '<b><i>$1</i></b>')\n                        .replace(/\\*{3}(.*?)\\*{3}/g, '<b><i>$1</i></b>')\n                        .replace(/\\*\\*_(.*?)_\\*\\*/g, '<b><i>$1</i></b>')\n                        .replace(/\\*\\*\"(.*?)\"\\*\\*/g, '<b>\"$1\"</b>')\n                        .replace(/\"\\*\\*(.*?)\\*\\*\"/g, '\"<b>$1</b>\"')\n                        .replace(/\\*\\*~(.*?)~\\*\\*/g, '<b>$1</b>')\n                        .replace(/\\*\\*#(.*?)\\*\\*/g, '<b>$1</b>')\n                        .replace(/\\*\\*;(.*?);\\*\\*/g, '<b>$1</b>')\n                        .replace(/\\*\\*\\^(.*?)\\^\\*\\*/g, '<b>$1</b>')\n                        .replace(/\\*\\*\\{(.*?)\\}\\*\\*/g, '<b>$1</b>')\n                        .replace(/\\*\\*(.*?)\\*\\*/g, '<b>$1</b>')\n                        .replace(/_(.*?)_/g, '<i>$1</i>')\n                ).join('<br>')}</p>`;\n        })\n        .join('\\n');\n\n    return formattedText;\n}\n\nlet isAiWorking = false;\n\nconst promptInputField = document.querySelector('.prompt-input-field');\nconst sendPromptButton = document.querySelector('.send-prompt-button');\n\npromptInputField.addEventListener('input', (event) => {\n    if(promptInputField.value && promptInputField.value.trim() !== '' && !isAiWorking){\n        sendPromptButton.removeAttribute('disabled');\n    }\n    else{\n        sendPromptButton.setAttribute('disabled', true)\n    }\n});\n\nconst readCodeCheckbox = document.querySelector('#read-code-checkbox');\nconst readCodeButton = document.querySelector('.read-code-button');\nconst readCodeIcon = document.querySelector('.read-code-button iconify-icon');\n\nreadCodeCheckbox.addEventListener('change', (event) => {\n    if(readCodeCheckbox.checked){\n        readCodeButton.classList.add('active');\n        readCodeIcon.setAttribute('icon', 'basil:book-check-solid');\n    }else{\n        readCodeButton.classList.remove('active');\n        readCodeIcon.setAttribute('icon', 'basil:book-check-outline');\n    }\n});\n\npromptInputField.addEventListener('keydown', function(event) {\n    if(event.key === 'Enter' && !sendPromptButton.disabled) {\n        event.preventDefault();\n        sendPrompt();\n    }\n});\n\nconst aiChat = document.querySelector('.ai-chat');\n\nfunction sendPrompt(){\n    const createThinkingNav = document.createElement('nav');\n    createThinkingNav.classList.add('ai-generating-nav');\n    const createAiGeneratingIcon = document.createElement('iconify-icon');\n    createAiGeneratingIcon.classList.add('ai-generating-icon');\n    createAiGeneratingIcon.setAttribute('icon', 'line-md:loading-twotone-loop');\n    const createAiGeneratingMessage = document.createElement('p');\n    createAiGeneratingMessage.classList.add('ai-generating-message');\n    createAiGeneratingMessage.innerHTML = \"Thinking...\";\n    createThinkingNav.appendChild(createAiGeneratingIcon);\n    createThinkingNav.appendChild(createAiGeneratingMessage);\n\n    let prompt = promptInputField.value;\n\n    isAiWorking = true;\n\n    const createMessageBox = document.createElement('p');\n    createMessageBox.classList.add('message-box');\n    createMessageBox.innerHTML = prompt;\n\n    if(readCodeCheckbox.checked){\n        for(let i = 0; i < editors.length; i++){\n            if(editors[i].directory === document.querySelector('.current-file').getAttribute('directory')){\n                prompt += editors[i].editor.getValue();\n                const createReadMessage = document.createElement('iconify-icon');\n                createReadMessage.classList.add('read-message-icon');\n                createReadMessage.setAttribute('icon', 'hugeicons:ai-book');\n                createMessageBox.prepend(createReadMessage);\n                break;\n            }\n        }\n    }\n\n    aiChat.appendChild(createMessageBox);\n    aiChat.appendChild(createThinkingNav);\n\n    chatHistory.push({ role: \"user\", parts: [{ text: prompt }] });\n\n    const MAX_TOKENS = 1000000;\n    let totalCharCount = chatHistory.map(msg => msg.parts[0]).join('').length;\n    if(totalCharCount > MAX_TOKENS * 3) {\n        alert(\"Prompt history is too long! Please clear or shorten the conversation.\");\n        return;\n    }\n\n    pywebview.api.answer_prompt(chatHistory).then((result) => {\n        console.log(result);\n\n        result = formatGeminiResponse(result);\n\n        const createMessageBox = document.createElement('p');\n        createMessageBox.classList.add('ai-message');\n        createMessageBox.innerHTML = result;\n        aiChat.appendChild(createMessageBox);\n\n        chatHistory.push({ role: \"user\", parts: [{ text: result }] });\n        pywebview.api.set_ai_chat(chatHistory);\n        hljs.highlightAll();\n        createThinkingNav.remove();\n        isAiWorking = false;\n    }).catch((error) => {\n        console.error(\"Error:\", error);\n        const createMessageBox = document.createElement('p');\n        createMessageBox.classList.add('ai-message');\n        createMessageBox.innerHTML = \"An error occurred while processing your request.\";\n        aiChat.appendChild(createMessageBox);\n        createThinkingNav.remove();\n        isAiWorking = false;\n    });\n\n    promptInputField.value = '';\n    sendPromptButton.setAttribute('disabled', true);\n    readCodeCheckbox.checked = false;\n    readCodeButton.classList.remove('active');\n    readCodeIcon.setAttribute('icon', 'basil:book-check-outline');\n}\n\n\nfunction clearChatHistory(){\n    chatHistory = [];\n    pywebview.api.set_ai_chat(chatHistory);\n    aiChat.innerHTML = '';\n}",
            "cursor": {
                "lineNumber": 1,
                "column": 1
            },
            "scrollTop": 0,
            "scrollLeft": 0
        },
        {
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/ai_deneme.html",
            "content": "<!DOCTYPE html>\n<html>\n<body>\n    <script src=\"https://js.puter.com/v2/\"></script>\n    <script>\n        const socket = new WebSocket(\"ws://localhost:6789\");\n        \n        socket.onmessage = function(event) {\n            let response = puter.ai.chat(event.data).then(puter.print);\n            socket.send(response);\n        };\n        \n    </script>\n</body>\n</html>\n",
            "cursor": {
                "lineNumber": 16,
                "column": 1
            },
            "scrollTop": 0,
            "scrollLeft": 0
        },
        {
            "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/index.html",
            "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monaco Editor in PyWebView</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <link rel=\"icon\" href=\"icon.ico\" type=\"image/x-icon\">\n    <link rel=\"stylesheet\" href=\"node_modules/@xterm/xterm/css/xterm.css\" />\n    <script src=\"node_modules/@xterm/xterm/lib/xterm.js\"></script>\n    <script src=\"node_modules/xterm-addon-fit/lib/xterm-addon-fit.js\"></script>\n</head>\n<body>\n    <div class=\"file-bottom-menu hidden\">\n        <button class=\"context-menu-button\">Close</button>\n        <button class=\"context-menu-button\">Copy File Name</button>\n        <button class=\"context-menu-button\">Copy Path</button>\n        <button class=\"context-menu-button\" id=\"bottom-file-menu-anchor\">Set Anchor for Workspace</button>\n    </div>\n    <div class=\"top-nav\">\n        <div class=\"frame\">\n            <button class=\"atr-file frame-button\">File</button>\n            <button class=\"atr-edit frame-button\">Edit</button>\n            <button class=\"atr-run frame-button\">Run</button>\n            <button class=\"atr-terminal frame-button\">Terminal</button>\n            <button class=\"atr-gpt frame-button\">GPT</button>\n        </div>\n        <div id=\"file-menu\" class=\"menu\">\n            <button class=\"menu-item\"><p>New File</p><p>Ctrl + N</p></button>\n            <button class=\"menu-item\"><p>Open File</p><p>Ctrl + O</p></button>\n            <button class=\"menu-item\"><p>Open Folder</p><p></p></button>\n            <button class=\"menu-item\" onclick=\"saveFile()\"><p>Save File</p><p>Ctrl + S</p></button>\n        </div>\n        <div id=\"edit-menu\" class=\"menu\">\n            <button class=\"menu-item\"><p>Undo</p><p>Ctrl + Z</p></button>\n            <button class=\"menu-item\"><p>Redo</p><p>Ctrl + Y</p></button>\n            <button class=\"menu-item\"><p>Cut</p><p>Ctrl + C</p></button>\n            <button class=\"menu-item\"><p>Copy</p><p>Ctrl + C</p></button>\n            <button class=\"menu-item\"><p>Paste</p><p>Ctrl + V</p></button>\n            <button class=\"menu-item\"><p>Find</p><p>Ctrl + F</p></button>\n        </div>\n        <div id=\"run-menu\" class=\"menu\">\n            <button class=\"menu-item\" onclick=\"runCode()\"><p>Start</p><p>F5</p></button>\n            <button class=\"menu-item\" disabled><p>Stop</p><p>Shift + F5</p></button>\n            <button class=\"menu-item\" disabled><p>Restart</p><p>Ctrl + Shift + F5</p></button>\n        </div>\n        <div id=\"terminal-menu\" class=\"menu\">\n            <button class=\"menu-item\" onclick=\"openTerminal()\"><p>Open Terminal</p><p>Ctrl + `</p></button>\n            <button class=\"menu-item\" onclick=\"closeTerminal()\"><p>Close Terminal</p><p>Ctrl + `</p></button>\n            <button class=\"menu-item\" onclick=\"killTerminal()\">Kill Terminal</button>\n            <button class=\"menu-item\" onclick=\"restartTerminal()\"><p>Restart Terminal</p><p>Ctrl + Alt + `</p></button>\n        </div>\n        <div id=\"gpt-menu\" class=\"menu\">\n            <button class=\"menu-item\" style=\"padding: 0 10px;\" onclick=\"openApiPopup()\"><p>Enter API Key</p><iconify-icon class=\"ai-api-tick\" icon=\"qlementine-icons:check-tick-small-16\"></iconify-icon></button>\n        </div>\n        <div class=\"drag-bar\"></div>\n        <div class=\"window-controls\">\n            <button onclick=\"relaodWindow()\" class=\"reload-button\">Reload</button>\n            <button class=\"control-button minimize\"><iconify-icon icon=\"mingcute:minimize-fill\"></iconify-icon></button>\n            <button class=\"control-button maximize\"><iconify-icon icon=\"fluent:arrow-maximize-16-filled\"></iconify-icon></button>\n            <!-- <button class=\"control-button maximize\"><iconify-icon icon=\"mdi:maximize\"></iconify-icon></button> -->\n            <button class=\"control-button close\"><iconify-icon icon=\"mingcute:close-fill\"></iconify-icon></button>\n        </div>\n    </div>\n    <div class=\"content\">\n        <div onclick=\"this.style.display = 'none'\" class=\"drag-overlay\"><h1>Leave Files and Folders</h1></div>\n        <div class=\"windows\">\n            <div class=\"api-popup\">\n                <input placeholder=\"Enter your API Key\" type=\"text\">\n                <button onclick=\"saveAiApiKey()\">Confirm Key</button>\n                <a href=\"https://openrouter.ai/deepseek/deepseek-r1:free/api\">Don't have API Key?</a>\n            </div>\n            <div class=\"answer-popups\">\n            </div>\n            <div class=\"terminal-element\"></div>\n            <div class=\"home window\"></div>\n        </div>\n        <div class=\"chat-window\">\n            <div class=\"chat-window-header\">\n                <h1>AI CHAT</h1>\n                <nav style=\"display: flex;\">\n                    <button class=\"ai-chat-panel-button\" title=\"Clear History\" onclick=\"clearChatHistory()\">\n                        <iconify-icon icon=\"fluent:history-dismiss-20-filled\"></iconify-icon>\n                    </button>\n                    <button class=\"ai-chat-panel-button active\" onclick=\"chatPanelToRight(this)\">\n                        <iconify-icon icon=\"proicons:panel-right-open\"></iconify-icon>\n                    </button>\n                    <button class=\"ai-chat-panel-button\" onclick=\"chatPanelToLeft(this)\">\n                        <iconify-icon icon=\"proicons:panel-left-open\"></iconify-icon>\n                    </button>\n                    <button class=\"ai-chat-panel-button\" onclick=\"closeChatPanel()\">\n                        <iconify-icon icon=\"si:close-fill\"></iconify-icon>\n                    </button>\n                </nav>\n            </div>\n            <div class=\"ai-chat\"></div>\n            <div class=\"prompt-input\">\n                <input type=\"text\" class=\"prompt-input-field\" placeholder=\"Enter your prompt here...\">\n                <nav class=\"prompt-input-bottom\">\n                    <label for=\"read-code-checkbox\" class=\"read-code-button\"><iconify-icon icon=\"basil:book-check-outline\"></iconify-icon>Read Code<input style=\"display: none;\" id=\"read-code-checkbox\" type=\"checkbox\"></label>            \n                    <button class=\"send-prompt-button\" onclick=\"sendPrompt()\" disabled><iconify-icon icon=\"fluent:send-16-filled\"></iconify-icon></button>\n                </nav>\n            </div>\n        </div>\n        <div class=\"explorer\">\n            <p class=\"directory-title\"></p>\n            <div class=\"files-explorer\"></div>\n        </div>\n    </div>\n    <div class=\"bottom-nav\">\n        <div class=\"file-trash-bottom\">\n            <iconify-icon icon=\"entypo:cross\"></iconify-icon>\n        </div>\n\n        <nav class=\"bottom-files\"></nav>\n        <button class=\"explorer-button\"><iconify-icon icon=\"icon-park-solid:up-one\"></iconify-icon></button>\n    </div>\n    <div id=\"resizer1\" class=\"resizer\"></div>\n    <div id=\"resizer2\" class=\"resizer\"></div>\n    <div id=\"resizer3\" class=\"resizer\"></div>\n    <div id=\"resizer4\" class=\"resizer\"></div>\n</body>\n<script>\n    var require = { paths: { 'vs': 'node_modules/monaco-editor/min/vs' } };\n</script>\n<script src=\"https://code.iconify.design/iconify-icon/2.3.0/iconify-icon.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js\"></script>\n<script src=\"node_modules/monaco-editor/min/vs/loader.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n<script src=\"script.js\"></script>\n<script src=\"code.js\"></script>\n<script src=\"language.js\"></script>\n<script src=\"open-file.js\"></script>\n<script src=\"bring-file.js\"></script>\n<script src=\"reload.js\"></script>\n<script src=\"interactlib.js\"></script>\n<script src=\"save.js\"></script>\n<script src=\"window.js\"></script>\n<script src=\"terminal.js\"></script>\n<script src=\"run.js\"></script>\n<script src=\"right-click.js\"></script>\n<script src=\"onwebviewloaded.js\"></script>\n<script src=\"ai.js\"></script>\n<script src=\"shortcuts.js\"></script>\n<script type=\"text/javascript\"></script>\n</html>\n",
            "cursor": {
                "lineNumber": 148,
                "column": 1
            },
            "scrollTop": 0,
            "scrollLeft": 0
        }
    ],
    "ai_chat": [
        {
            "role": "user",
            "parts": [
                {
                    "text": "Merhaba"
                }
            ]
        },
        {
            "role": "user",
            "parts": [
                {
                    "text": "<p>Merhaba!  Nas\u0131l yard\u0131mc\u0131 olabilirim?<br></p>"
                }
            ]
        }
    ],
    "anchor_file": {
        "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/main.py",
        "name": "main.py"
    }
}