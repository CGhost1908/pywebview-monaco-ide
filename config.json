{
    "directory": "C:\\Users\\Eren\\Desktop\\pywebview-monaco-ide",
    "explorer": true,
    "workspaces": [
        {
            "directory": "C:\\Users\\Eren\\Desktop\\yuz_tanima",
            "bottom_files": [
                {
                    "name": "app.py",
                    "directory": "C:/Users/Eren/Desktop/yuz_tanima/app.py"
                },
                {
                    "name": "index.html",
                    "directory": "C:/Users/Eren/Desktop/yuz_tanima/templates/index.html"
                }
            ],
            "current_file": {
                "name": "index.html",
                "directory": "C:/Users/Eren/Desktop/yuz_tanima/templates/index.html"
            },
            "anchor_file": {
                "directory": "C:/Users/Eren/Desktop/yuz_tanima/app.py",
                "name": "app.py"
            },
            "editors": [
                {
                    "directory": "C:/Users/Eren/Desktop/yuz_tanima/app.py",
                    "content": "from flask import Flask, request, jsonify, send_from_directory, render_template\nimport cv2\nimport numpy as np\nimport sqlite3\nimport os\nfrom PIL import Image\nimport base64\nfrom tensorflow.keras.models import load_model\nimport pickle\nimport requests\n\napp = Flask(__name__, static_folder=\"static\", template_folder=\"templates\")\n\n# Y\u00fcz tan\u0131ma modeli\nface_cascade = cv2.CascadeClassifier('Cascade/haarcascade_frontalface_default.xml')\nrecognizer = cv2.face.LBPHFaceRecognizer_create()\nrecognizer.read('trainer/trainer.yml')\n\nmodel = load_model(\"trained_model.h5\")\nwith open(\"label_encoders.pkl\", \"rb\") as f:\n    label_encoders = pickle.load(f)\nwith open(\"scaler.pkl\", \"rb\") as f:\n    scaler = pickle.load(f)\n\n# Veritaban\u0131 ba\u011flant\u0131 fonksiyonu\ndef get_db():\n    conn = sqlite3.connect(\"database.db\")\n    conn.row_factory = sqlite3.Row\n    return conn\n\n# Anasayfa\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n@app.route(\"/api/customer/<int:customer_id>\", methods=[\"GET\"])\ndef get_customer_data(customer_id):\n    db = get_db()\n    customer = db.execute(\"SELECT name, total_spent FROM customers WHERE id=?\", (customer_id,)).fetchone()\n    db.close()\n    if customer:\n        return jsonify(dict(customer))\n    return jsonify({\"error\": \"M\u00fc\u015fteri bulunamad\u0131\"}), 404\n\n@app.route(\"/api/order_food/<int:customer_id>\", methods=[\"POST\"])\ndef order_food(customer_id):\n    data = request.get_json()\n    foods = \", \".join(data['foods']) \n    db = get_db()\n    cursor = db.cursor()\n    \n    cursor.execute(\"INSERT INTO orders (customer_id, foods) VALUES (?, ?)\", (customer_id, foods))\n    \n    cursor.execute(\"UPDATE customers SET total_spent = total_spent + ? WHERE id = ?\", (data['total'], customer_id))\n    \n    db.commit()\n    db.close()\n    \n    return jsonify({\"message\": \"Sipari\u015f ba\u015far\u0131yla al\u0131nd\u0131\"}), 201\n\n@app.route(\"/api/get_food_percentage/<int:customer_id>\", methods=[\"GET\"])\ndef get_food_percentage(customer_id):\n    conn = sqlite3.connect(\"database.db\")\n    cursor = conn.cursor()\n\n    cursor.execute(\"SELECT foods FROM orders WHERE customer_id = ?\", (customer_id,))\n    rows = cursor.fetchall()\n    conn.close()\n\n    food_count = {}\n    total_count = 0\n\n    for row in rows:\n        foods_str = row[0]\n        foods = [f.strip() for f in foods_str.split(\",\")]\n        for food in foods:\n            food_count[food] = food_count.get(food, 0) + 1\n            total_count += 1\n\n    top_3 = sorted(food_count.items(), key=lambda x: x[1], reverse=True)[:3]\n\n    food_percentages = {}\n    if total_count > 0:\n        for food, count in top_3:\n            food_percentages[food] = round((count / total_count) * 100, 2)\n\n    return food_percentages\n\n@app.route(\"/api/suggest_food\", methods=[\"POST\"])\ndef suggest_food():\n    data = request.get_json()\n    print(data)\n    try:\n        drink_encoded = label_encoders['drink_item'].transform([data['drink']])[0]\n        weather_encoded = label_encoders['weather'].transform([data['weather']])[0]\n        time_encoded = label_encoders['time_of_day'].transform([data['meal']])[0]\n        input_data = np.array([[1, drink_encoded, weather_encoded, data['temperature'], time_encoded]])\n        input_data = scaler.transform(input_data)\n        prediction = model.predict(input_data)\n        recommended_index = np.argmax(prediction)\n        recommended_food = label_encoders['food_item'].inverse_transform([recommended_index])[0]\n        return jsonify({\"suggestion\": recommended_food})\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route(\"/api/register_user\", methods=[\"POST\"])\ndef register_user():\n    name = request.json.get(\"name\")\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(\"SELECT MAX(id) FROM customers\")\n    last_id = cursor.fetchone()[0]\n    user_id = 1 if last_id is None else last_id + 1\n    cursor.execute(\"INSERT INTO customers (id, name) VALUES (?, ?)\", (user_id, name))\n    db.commit()\n\n    # Y\u00fcz yakalama\n    cam = cv2.VideoCapture(0)\n    if not cam.isOpened():\n        return jsonify({\"error\": \"Kamera a\u00e7\u0131lamad\u0131\"}), 500\n\n    face_detector = face_cascade\n    count = 0\n    save_path = os.path.join(\"static\", \"images\")\n    os.makedirs(save_path, exist_ok=True)\n\n    while count < 50:\n        ret, img = cam.read()\n        if not ret:\n            break\n        gray = cv2.cvtColor(cv2.flip(img, 1), cv2.COLOR_BGR2GRAY)\n        faces = face_detector.detectMultiScale(gray, 1.3, 5)\n        for (x, y, w, h) in faces:\n            count += 1\n            filename = f\"{name}.{user_id}.{count}.jpg\"\n            cv2.imwrite(os.path.join(save_path, filename), gray[y:y+h, x:x+w])\n            cv2.imshow('image', img)\n        if cv2.waitKey(100) & 0xff == 27:\n            break\n\n    cam.release()\n    cv2.destroyAllWindows()\n\n    # E\u011fitimi g\u00fcncelle\n    imagePaths = [os.path.join(save_path, f) for f in os.listdir(save_path)]\n    faceSamples, ids = [], []\n    for path in imagePaths:\n        PIL_img = Image.open(path).convert('L')\n        img_numpy = np.array(PIL_img, 'uint8')\n        id = int(os.path.split(path)[-1].split(\".\")[1])\n        faces = face_detector.detectMultiScale(img_numpy)\n        for (x, y, w, h) in faces:\n            faceSamples.append(img_numpy[y:y+h, x:x+w])\n            ids.append(id)\n    recognizer.train(faceSamples, np.array(ids))\n    recognizer.write('trainer/trainer.yml')\n\n    return jsonify({\"message\": f\"{name} ba\u015far\u0131yla kaydedildi\", \"user_id\": user_id})\n\n@app.route(\"/api/customer/<int:customer_id>/get_orders\", methods=[\"GET\"])\ndef get_orders(customer_id):\n    conn = sqlite3.connect(\"database.db\")\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT foods FROM orders WHERE customer_id = ? ORDER BY id\", (customer_id,))\n    orders = [row[0] for row in cursor.fetchall()]           \n    conn.close()\n    return orders\n\n@app.route(\"/api/recognize_face\", methods=[\"GET\"])\ndef recognize_face():\n    cam = cv2.VideoCapture(0)\n    if not cam.isOpened():\n        return jsonify({\"error\": \"Kamera a\u00e7\u0131lamad\u0131\"}), 500\n\n    recognized = False\n    while not recognized:\n        ret, img = cam.read()\n        if not ret:\n            break\n        gray = cv2.cvtColor(cv2.flip(img, 1), cv2.COLOR_BGR2GRAY)\n        faces = face_cascade.detectMultiScale(gray, 1.2, 5)\n        for (x, y, w, h) in faces:\n            id_, conf = recognizer.predict(gray[y:y+h, x:x+w])\n            if conf < 100:\n                db = get_db()\n                result = db.execute(\"SELECT name FROM customers WHERE id=?\", (id_,)).fetchone()\n                db.close()\n                if result:\n                    name = result['name']\n                    image_filename = f\"{name}.{id_}.1.jpg\"\n                    image_path = os.path.join(\"static\", \"images\", image_filename)  \n                    if os.path.exists(image_path):\n                        with open(image_path, \"rb\") as img_file:\n                            encoded_img = base64.b64encode(img_file.read()).decode('utf-8')\n                        cam.release()\n                        return jsonify({\n                            \"id\": id_,\n                            \"name\": name,\n                            \"image\": encoded_img,\n                            # \"orders\": get_orders()\n                        })\n        if cv2.waitKey(1) & 0xFF == 27:\n            break\n\n    cam.release()\n    return jsonify({\"error\": \"Y\u00fcz tan\u0131namad\u0131\"}), 404\n\n@app.route('/api/customer/<int:customer_id>/total_spent', methods=['GET'])\ndef get_total_spent(customer_id):\n    conn = sqlite3.connect(\"database.db\")\n    cursor = conn.cursor()\n\n    cursor.execute(\"SELECT total_spent FROM customers WHERE id=?\", (customer_id,))\n    result = cursor.fetchone()\n\n    conn.close()\n\n    if result:\n        total_spent = result[0]\n    else:\n        total_spent = 0\n\n    return jsonify({'customer_id': customer_id, 'total_spent': total_spent})\n\nAPI_KEY = 'a010c2f6d9268b3039ce95c457da11d6'\n@app.route('/api/weather', methods=['POST'])\ndef get_weather():\n    data = request.get_json()\n    lat = data.get('lat')\n    lon = data.get('lon')\n\n    if lat is None or lon is None:\n        return jsonify({'error': 'Konum bilgisi eksik'}), 400\n\n    url = f'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API_KEY}&units=metric&lang=tr'\n\n    response = requests.get(url)\n    if response.status_code != 200:\n        return jsonify({'error': 'API iste\u011fi ba\u015far\u0131s\u0131z'}), 500\n\n    return jsonify(response.json())\n\n\n@app.route(\"/static/images/<path:filename>\")\ndef serve_image(filename):\n    return send_from_directory(\"static/images\", filename)\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=5000, debug=True)\n",
                    "cursor": {
                        "lineNumber": 24,
                        "column": 1
                    },
                    "scrollTop": 0,
                    "scrollLeft": 0
                },
                {
                    "directory": "C:/Users/Eren/Desktop/yuz_tanima/templates/index.html",
                    "content": "<!DOCTYPE html>\n<html lang=\"tr\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Y\u00fcz Tan\u0131ma Sistemi</title>\n\n    <script src=\"{{ url_for('static', filename='main.js') }}\"></script>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\" />\n\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0&icon_names=arrow_back\" />\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link href=\"https://fonts.googleapis.com/css2?family=Afacad+Flux:wght@100..1000&family=Gidole&display=swap\" rel=\"stylesheet\" />\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n</head>\n<body>\n    <div class=\"menu\">\n        <div style=\"display: flex; align-items: center; flex-direction: column; width: 100%;\">\n            <h1 class=\"menu-title\">Yemek Sipari\u015f Sistemi</h1>\n            <button class=\"yuz-tani menu-button\" onclick=\"startRecognition()\">Y\u00fcz Tan\u0131</button>\n            <button class=\"yeni-kullanici menu-button\" onclick=\"registerUser()\">Yeni Kullan\u0131c\u0131 Kayd\u0131</button>\n            <button disabled class=\"siparis-girisi menu-button\" onclick=\"document.querySelector('.order').style.display = 'flex'; document.querySelector('.menu').style.display = 'none'; document.querySelector('.suggestion').style.display = 'none';\">Sipari\u015f Giri\u015fi</button>\n            <button disabled class=\"yemek-oneri suggest-food-button menu-button\" onclick=\"document.querySelector('.suggestion').style.display = 'flex'; document.querySelector('.menu').style.display = 'none'; document.querySelector('.order').style.display = 'none';\">Yemek \u00d6ner</button>\n        </div>\n        <div class=\"weather\">\n            <div class=\"weather-details\">\n                <h1 class=\"location\" style=\"margin-bottom:0px;\"></h1>\n                <img class=\"icon\"/>\n                <h1 class=\"temperature\" style=\"margin-top:0px;\">0\u00b0C</h1>\n            </div>\n        </div>\n    </div>\n    <div class=\"suggestion\">\n        <span class=\"material-symbols-outlined suggestion-back\" onclick=\"document.querySelector('.suggestion').style.display = 'none'; document.querySelector('.order').style.display = 'none'; document.querySelector('.menu').style.display = 'flex';\">arrow_back</span>\n        <div class=\"suggest-div\">\n            <h1 class=\"suggestion-title\">Yemek \u00d6ner</h1>\n            <select name=\"\" id=\"beverage\">\n                <option value=\"cola\">Cola</option>\n                <option value=\"ayran\">Fanta</option>\n                <option value=\"sprite\">Sprite</option>\n                <option value=\"ayran\">Ayran</option>\n                <option value=\"limonata\">Limonata</option>\n                <option value=\"milkshake\">Milkshake</option>\n                <option value=\"none\">None</option>\n            </select>\n            <select name=\"\" id=\"weather\">\n                <option value=\"gunesli\">Gunesli</option>\n                <option value=\"bulutlu\">Bulutlu</option>\n                <option value=\"yagmurlu\">Yagmurlu</option>\n            </select>\n            <input type=\"number\" id=\"temperature\" value=\"0\" />\n            <select name=\"\" id=\"meal\">\n                <option value=\"kahvalti\">Kahvalti</option>\n                <option value=\"ogle yemegi\">Ogle yemegi</option>\n                <option value=\"aksam yemegi\">Aksam yemegi</option>\n            </select>\n            <button class=\"button-class\" onclick=\"suggestFood()\">\u00d6ner</button>\n        </div>\n    </div>\n    <div class=\"order\">\n        <span class=\"material-symbols-outlined suggestion-back\" onclick=\"document.querySelector('.order').style.display = 'none'; document.querySelector('.suggestion').style.display = 'none'; document.querySelector('.menu').style.display = 'flex';\">arrow_back</span>\n        <div class=\"suggest-div\">\n            <div class=\"items\">\n                <label><input type=\"checkbox\" price=\"0\" value=\"cola\" /> Cola</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"fanta\" /> Fanta</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"sprite\" /> Sprite</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"ayran\" /> Ayran</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"limonata\" /> Limonata</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"milkshake\" /> Milkshake</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"mercimek corbasi\" /> Mercimek \u00c7orbas\u0131</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"makarna\" /> Makarna</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"tost\" /> Tost</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"burger\" /> Burger</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"manti\" /> Mant\u0131</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"balik\" /> Bal\u0131k</label>\n                <label><input type=\"checkbox\" price=\"0\" value=\"domates corbasi\" /> Domates \u00c7orbas\u0131</label>\n            </div>\n            <select name=\"\" id=\"weather2\">\n                <option value=\"gunesli\">Gunesli</option>\n                <option value=\"bulutlu\">Bulutlu</option>\n                <option value=\"yagmurlu\">Yagmurlu</option>\n            </select>\n            <input type=\"number\" id=\"temperature2\" value=\"0\" />\n            <select name=\"\" id=\"meal2\">\n                <option value=\"kahvalti\">Kahvalti</option>\n                <option value=\"ogle yemegi\">Ogle yemegi</option>\n                <option value=\"aksam yemegi\">Aksam yemegi</option>\n            </select>\n            <button class=\"button-class\" onclick=\"orderFood()\">Sipari\u015f Ver</button>\n        </div>\n    </div>\n    <div class=\"user\">\n        <h1 id=\"recognized-name\"></h1>\n        <img id=\"recognized-image\" src=\"\" />\n        <div class=\"percentage\"></div>\n        <button class=\"extend-orders\" onclick=\"extendOrders()\">Sipari\u015f Ge\u00e7mi\u015fini Gor</button>\n        <nav>\n            <h1>Toplam Harcanan: </h1>\n            <h1 id=\"total-spent-text\"></h1>\n        </nav>\n    </div>\n    <div class=\"order-history-div\" style=\"flex-direction: column; align-items: center; justify-content: center; margin-top: 20px; flex-shrink: 0;\">\n        <h3 class=\"user-text\">Son Sipari\u015fler</h3>\n        <div class=\"order-history\"></div>\n    </div>\n</body>\n</html>\n",
                    "cursor": {
                        "lineNumber": 34,
                        "column": 1
                    },
                    "scrollTop": 350,
                    "scrollLeft": 0
                }
            ]
        },
        {
            "directory": "C:\\Users\\Eren\\Desktop\\pywebview-monaco-ide",
            "bottom_files": [
                {
                    "name": "deneme.py",
                    "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/deneme.py"
                },
                {
                    "name": "bring-file.js",
                    "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/bring-file.js"
                },
                {
                    "name": "code.js",
                    "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/code.js"
                },
                {
                    "name": "deneme.js",
                    "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/deneme.js"
                }
            ],
            "current_file": {
                "name": "code.js",
                "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/code.js"
            },
            "anchor_file": null,
            "editors": [
                {
                    "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/deneme.py",
                    "content": "",
                    "cursor": {
                        "lineNumber": 1,
                        "column": 1
                    },
                    "scrollTop": 0,
                    "scrollLeft": 0
                },
                {
                    "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/bring-file.js",
                    "content": "\nasync function bringFile(name, directory){\n    directory = normalizePath(directory);\n    checkBottomExistance(name, directory);\n\n    if(document.querySelector('.current-file')){\n        document.querySelector('.current-file').classList.remove('current-file');\n    }\n    document.querySelector(`.file-bottom[directory=\"${directory}\"]`).classList.add('current-file');\n\n    if(document.querySelector('.file-explorer.active')){\n        document.querySelector('.file-explorer.active').classList.remove('active');\n    }\n    if(document.querySelector(`.file-explorer[directory=\"${directory}\"]`)){\n        document.querySelector(`.file-explorer[directory=\"${directory}\"]`).classList.add('active');\n    }\n\n    pywebview.api.set_current_file(name, directory);\n\n    pywebview.api.watch_file(directory);\n    \n    const result = await pywebview.api.read_file(directory);\n\n    if(checkEditorExist(directory)){\n        document.querySelectorAll('.window').forEach(window => {\n            window.style.display = 'none';\n        });\n        // compareContent(directory);\n\n        document.querySelector(`.window[directory=\"${directory}\"]`).style.display = 'flex';\n    }else{\n        const result = await pywebview.api.read_file(directory);\n    \n        const createWindow = document.createElement('div');\n        createWindow.classList.add('window');\n        createWindow.setAttribute('directory', directory);\n    \n        document.querySelectorAll('.window').forEach(window => {\n            window.style.display = 'none';\n        });\n        createWindow.style.display = 'flex';\n        document.querySelector('.windows').appendChild(createWindow);\n    \n        if(result == 'void'){\n            openEditor(directory, findLanguage(name.split('.').pop().toLowerCase()), '');\n        }else if(result == 'unsupport'){\n            if (['jpg', 'jpeg', 'gif', 'png', 'ico', 'webp'].includes(name.split('.').pop().toLowerCase())){\n                const createImage = document.createElement('img');\n                const encodedImage = await pywebview.api.send_image(directory);\n                createImage.src = `data:image/jpeg;base64,${encodedImage}`;\n                createImage.classList.add('window-image');\n\n                createWindow.style.alignItems = 'center';\n                createWindow.style.justifyContent = 'center';\n\n                let scale = 1;\n                let isDragging = false;\n                let startX, startY, initialX = 0, initialY = 0;\n\n                createImage.style.cursor = 'grab';\n\n                createImage.addEventListener('wheel', function(event) {\n                    if (event.deltaY > 0) {\n                        scale /= 1.1;\n                    } else {\n                        scale *= 1.1;\n                    }\n                    createImage.style.scale = scale;\n                });\n\n                createImage.addEventListener('mousedown', function(event){\n                    event.preventDefault();\n                    if (event.target && event.target.classList.contains('window-image')) {\n                        isDragging = true;\n                        startX = event.clientX - initialX;\n                        startY = event.clientY - initialY;\n                        event.target.style.cursor = 'grabbing';\n                    }\n                });\n\n                createImage.addEventListener('mousemove', function(event) {\n                    if (isDragging) {\n                        initialX = event.clientX - startX;\n                        initialY = event.clientY - startY;\n                        createImage.style.transform = `translate(${initialX}px, ${initialY}px)`;\n                    }\n                });\n\n                createImage.addEventListener('mouseup', function(event) {\n                    isDragging = false;\n                    event.target.style.cursor = 'grab';\n                });\n\n                createImage.addEventListener('mouseleave', function(event) {\n                    if (isDragging) {\n                        isDragging = false;\n                        event.target.style.cursor = 'grab';\n                    }\n                });\n\n\n                createWindow.appendChild(createImage);\n            }else{\n                const createPopup = document.createElement('div');\n                createPopup.classList.add('window-popup');\n                const createPopupDecoration = document.createElement('div');\n                createPopupDecoration.classList.add('popup-decoration');\n                const createNav = document.createElement('nav');\n                createNav.classList.add('popup-nav');\n                const createDiv = document.createElement('div');\n                createDiv.classList.add('popup-div');\n                const createIcon = document.createElement('iconify-icon');\n                createIcon.setAttribute('icon', 'mage:file-cross-fill')\n                createIcon.classList.add('popup-icon');\n                const createTitle = document.createElement('p');\n                createTitle.classList.add('popup-title');\n                createTitle.textContent = 'Unsupported File Type'\n                const createText = document.createElement('p');\n                createText.classList.add('popup-text');\n                createText.textContent = 'Unfortunately, the file type you are trying to upload is not supported.'\n                const createButton = document.createElement('button');\n                createButton.classList.add('popup-button');\n\n                createPopup.appendChild(createPopupDecoration);\n\n                createPopup.appendChild(createNav);\n                createNav.appendChild(createIcon);\n\n                createDiv.appendChild(createTitle);\n                createDiv.appendChild(createText);\n                createNav.appendChild(createDiv);\n\n                createPopup.appendChild(createNav);\n\n                createButton.textContent = 'Close Tab';\n                createButton.onclick = function(){\n                    closeAllTabs();\n                }\n                createPopup.appendChild(createButton);\n\n                createWindow.style.alignItems = 'center';\n                createWindow.style.justifyContent = 'center';\n                createWindow.appendChild(createPopup);\n            }\n        }else if(result){\n            openEditor(directory, findLanguage(name.split('.').pop().toLowerCase()), result);\n        }\n    }\n}\n\nfunction checkBottomExistance(name, directory){\n    directory = normalizePath(directory);\n    if(!document.querySelector(`.file-bottom[directory=\"${normalizePath(directory)}\"]`)){\n        const createFileBottom = document.createElement('div');\n        createFileBottom.onclick = function(){\n            bringFile(name, directory);\n        };\n        createFileBottom.classList.add('file-bottom');\n        createFileBottom.setAttribute('directory', directory);\n        createFileBottom.setAttribute('name', name);\n        createFileBottom.setAttribute('title', normalizePath(directory));\n\n        const unsavedSign = document.createElement('iconify-icon');\n        unsavedSign.classList.add('unsaved-sign');\n        unsavedSign.setAttribute('icon', 'pepicons-print:circle-filled');\n\n        const createIcon = document.createElement('iconify-icon');\n        createIcon.classList.add('file-icon');\n        const ext = name.split('.').pop().toLowerCase();\n        createIcon.setAttribute('icon', getIconForExtension(ext));\n\n        const createFileName = document.createElement('p');\n        createFileName.classList.add('file-name-bottom');\n        createFileName.textContent = name;\n\n        createFileBottom.appendChild(createIcon);\n        createFileBottom.appendChild(createFileName);\n        createFileBottom.appendChild(unsavedSign);\n\n        createFileBottom.draggable = true;\n        bottomFiles.appendChild(createFileBottom);\n    }\n}\n \n\nfunction checkEditorExist(directory){\n    if(document.querySelector(`.window[directory='${normalizePath(directory)}']`)){\n        return true;\n    }else{\n        return false; \n    }\n}\n\n\nasync function compareContent(file){\n    file = normalizePath(file);\n    for(let i = 0; i < editors.length; i++){\n        if(editors[i].directory === file){\n            pywebview.api.read_file(file).then(function(content){\n                if(editors[i].editor.getValue() != content && !document.querySelector(`.file-bottom[directory='${file}']`).hasAttribute('unsaved')){\n                    editors[i].editor.setValue(content);\n                    document.querySelector(`.file-bottom[directory='${file}'] .unsaved-sign`).style.opacity = '0';\n                    document.querySelector(`.file-bottom[directory='${file}']`).removeAttribute('unsaved');\n                }\n            });\n            break;\n        }\n    }\n}\n\n",
                    "cursor": {
                        "lineNumber": 211,
                        "column": 1
                    },
                    "scrollTop": 0,
                    "scrollLeft": 0
                },
                {
                    "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/code.js",
                    "content": "let editors = []; \nlet editorStates = [];\n\n\nfunction openEditor(directory, language, content){\n    let editor = null;\n    directory = normalizePath(directory);\n\n    require(['vs/editor/editor.main'], function() {\n        \n        monaco.languages.typescript.javascriptDefaults.setCompilerOptions({\n            target: monaco.languages.typescript.ScriptTarget.ESNext,\n            allowNonTsExtensions: true\n        });\n\n        monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\n            noSemanticValidation: false,\n            noSyntaxValidation: false\n        });\n\n        monaco.editor.defineTheme('custom', {\n            base: 'vs-dark',\n            inherit: true,\n            rules: [],\n            colors: {\n                \"activityBar.dropBorder\": \"#9039c7\",\n                \"activityBar.foreground\": \"#fff\",\n                \"activityBarBadge.background\": \"#4d057b\",\n                \"activityBarBadge.foreground\": \"#e7e7e7\",\n                \"badge.background\": \"#7d16bfa0\",\n                \"breadcrumb.activeSelectionForeground\": \"#ede4f1\",\n                \"breadcrumb.background\": \"#25013c\",\n                \"breadcrumb.focusForeground\": \"#ede4f1\",\n                \"breadcrumb.foreground\": \"#ede4f1\",\n                \"breadcrumbPicker.background\": \"#160024\",\n                \"button.background\": \"#7d16bf\",\n                \"button.hoverBackground\": \"#9039c7\",\n                \"button.secondaryBackground\": \"#5a068e80\",\n                \"button.secondaryHoverBackground\": \"#5a068e\",\n                \"contrastBorder\": \"#4d057b\",\n                \"debugToolBar.background\": \"#4d057b\",\n                \"diffEditor.border\": \"#4d057b\",\n                \"diffEditor.diagonalFill\": \"#d4d4d425\",\n                \"diffEditor.insertedTextBackground\": \"#00ff0028\",\n                \"diffEditor.removedTextBackground\": \"#ff000028\",\n                \"diffEditor.unchangedRegionBackground\": \"#25013c\",\n                \"diffEditor.unchangedRegionShadow\": \"#8818cd\",\n                \"diffEditor.unchangedRegionForeground\": \"#d4d4d4d0\",\n                \"dropdown.background\": \"#350354\",\n                \"dropdown.border\": \"#350354\",\n                \"dropdown.foreground\": \"#d4d4d4\",\n                \"dropdown.listBackground\": \"#350354\",\n                \"editor.findMatchBackground\": \"#7d16bf\",\n                \"editor.findMatchHighlightBackground\": \"#4d057be0\",\n                \"editor.findRangeHighlightBackground\": \"#4d057b50\",\n                \"editor.foreground\": \"#d4d4d4\",\n                \"editor.hoverHighlightBackground\": \"#4d057b80\",\n                \"editor.inactiveSelectionBackground\": \"#4d057b80\",\n                \"editor.lineHighlightBackground\": \"#25013Cb0\",\n                \"editor.rangeHighlightBackground\": \"#4d057ba0\",\n                \"editor.selectionBackground\": \"#1D022E\",\n                \"editor.selectionHighlightBackground\": \"#2F0F42FF\",\n                \"editor.wordHighlightBackground\": \"#1D022E\",\n                \"editor.wordHighlightStrongBackground\": \"#1D022E\",\n                \"editorBracketMatch.background\": \"#4d057b\",\n                \"editorBracketMatch.border\": \"#7d16bfb0\",\n                \"editorBracketHighlight.foreground1\": \"#ffd700\",\n                \"editorBracketHighlight.foreground2\": \"#da70d6\",\n                \"editorBracketHighlight.foreground3\": \"#179fff\",\n                \"editorBracketPairGuide.activeBackground1\": \"#ffd70090\",\n                \"editorBracketPairGuide.activeBackground2\": \"#da70d690\",\n                \"editorBracketPairGuide.activeBackground3\": \"#179fff90\",\n                \"editorBracketPairGuide.background1\": \"#ffd70040\",\n                \"editorBracketPairGuide.background2\": \"#da70d640\",\n                \"editorBracketPairGuide.background3\": \"#179fff40\",\n                \"editorCodeLens.foreground\": \"#9e85add0\",\n                \"editorCursor.foreground\": \"#b133ff\",\n                \"editorGroup.border\": \"#4d057b\",\n                \"editorGroup.dropBackground\": \"#9039c750\",\n                \"editorGroup.emptyBackground\": \"#160024\",\n                \"editorGroupHeader.noTabsBackground\": \"#25013c\",\n                \"editorGroupHeader.tabsBackground\": \"#25013c\",\n                \"editorGroupHeader.tabsBorder\": \"#25013c\",\n                \"editorHoverWidget.background\": \"#350354\",\n                \"editorHoverWidget.border\": \"#4d057b\",\n                \"editorInlayHint.foreground\": \"#d4d4d460\",\n                \"editorInlayHint.background\": \"#b133ff10\",\n                \"editorIndentGuide.activeBackground\": \"#9e85ad32\",\n                \"editorIndentGuide.activeBackground1\": \"#9e85ad32\",\n                \"editorIndentGuide.background\": \"#9e85ad00\",\n                \"editorIndentGuide.background1\": \"#9e85ad00\",\n                \"editorLink.activeForeground\": \"#ba7dd9\",\n                \"editorMarkerNavigation.background\": \"#25013c\",\n                \"editorMarkerNavigationError.background\": \"#ff5a5a\",\n                \"editorMarkerNavigationWarning.background\": \"#5aac5a\",\n                \"editorOverviewRuler.border\": \"#160024\",\n                \"editorRuler.foreground\": \"#9e85ad20\",\n                \"editorStickyScroll.background\": \"#25013c\",\n                \"editorStickyScrollHover.background\": \"#4d057b60\",\n                \"editorStickyScroll.border\": \"#4d057ba0\",\n                \"editorStickyScroll.shadow\": \"#4d057b30\",\n                \"editorSuggestWidget.foreground\": \"#d4d4d4d0\",\n                \"editorSuggestWidget.background\": \"#25013c\",\n                \"editorSuggestWidget.border\": \"#4d057bb0\",\n                \"editorSuggestWidget.selectedBackground\": \"#4d057b\",\n                \"editorSuggestWidget.selectedForeground\": \"#d4d4d4\",\n                \"editorSuggestWidget.highlightForeground\": \"#ba7dd9\",\n                \"editorWhitespace.foreground\": \"#9e85ad32\",\n                \"editorWidget.background\": \"#4d057b\",\n                \"errorForeground\": \"#e86969\",\n                \"foreground\": \"#d4d4d4\",\n                \"input.background\": \"#350354\",\n                \"input.foreground\": \"#d4d4d4\",\n                \"input.placeholderForeground\": \"#d4d4d460\",\n                \"inputOption.activeBorder\": \"#7d16bf\",\n                \"list.activeSelectionBackground\": \"#4d057b\",\n                \"list.activeSelectionForeground\": \"#d4d4d4\",\n                \"list.deemphasizedForeground\": \"#d4d4d450\",\n                \"list.dropBackground\": \"#4d057b80\",\n                \"list.focusBackground\": \"#4d057b\",\n                \"list.focusForeground\": \"#d4d4d4\",\n                \"list.highlightForeground\": \"#ba7dd9\",\n                \"list.hoverBackground\": \"#4d057b80\",\n                \"list.hoverForeground\": \"#d4d4d4a0\",\n                \"list.inactiveFocusBackground\": \"#4d057b\",\n                \"list.inactiveSelectionBackground\": \"#4d057b80\",\n                \"list.inactiveSelectionForeground\": \"#d4d4d4\",\n                \"list.invalidItemForeground\": \"#e86969\",\n                \"menu.background\": \"#25013c\",\n                \"menu.border\": \"#4d057b\",\n                \"menu.foreground\": \"#fff\",\n                \"menu.selectionForeground\": \"#fff\",\n                \"menu.separatorBackground\": \"#4d057b\",\n                \"menubar.selectionBackground\": \"#25013c\",\n                \"menubar.selectionBorder\": \"#25013c\",\n                \"menubar.selectionForeground\": \"#fff\",\n                \"multiDiffEditor.border\": \"#4d057bb0\",\n                \"multiDiffEditor.headerBackground\": \"#25013c\",\n                \"notebook.cellBorderColor\": \"#4d057ba6\",\n                \"notebook.cellHoverBackground\": \"#4d057b40\",\n                \"notebook.cellStatusBarItemHoverBackground\": \"#4d057b60\",\n                \"notebook.cellToolbarSeparator\": \"#4d057b60\",\n                \"notebook.focusedEditorBorder\": \"#4d057b\",\n                \"notebook.focusedCellBorder\": \"#4d057b\",\n                \"notebook.focusedCellBackground\": \"#4d057b60\",\n                \"notebook.outputContainerBackgroundColor\": \"#25013c\",\n                \"notifications.background\": \"#4d057b\",\n                \"panel.background\": \"#25013c\",\n                \"panel.border\": \"#160024\",\n                \"panel.dropBorder\": \"#9039c7\",\n                \"panelSectionHeader.background\": \"#4d057b\",\n                \"panelTitle.activeBorder\": \"#7d16bf\",\n                \"panelTitle.inactiveForeground\": \"#e7e7e750\",\n                \"panelTitle.activeForeground\": \"#e7e7e7\",\n                \"peekView.border\": \"#4d057b\",\n                \"peekViewEditorStickyScroll.background\": \"#25013c\",\n                \"peekViewTitle.background\": \"#4d057b\",\n                \"peekViewResult.background\": \"#25013c\",\n                \"peekViewEditor.background\": \"#25013c80\",\n                \"peekViewEditor.matchHighlightBackground\": \"#4d057be0\",\n                \"peekViewEditorGutter.background\": \"#25013c80\",\n                \"peekViewResult.matchHighlightBackground\": \"#4d057be0\",\n                \"peekViewResult.selectionBackground\": \"#4d057b\",\n                \"pickerGroup.border\": \"#4d057b\",\n                \"pickerGroup.foreground\": \"#b884d2\",\n                \"progressBar.background\": \"#9039c7\",\n                \"quickInput.foreground\": \"#d4d4d4d0\",\n                \"quickInput.background\": \"#25013c\",\n                \"quickInputList.focusBackground\": \"#4d057b\",\n                \"quickInputList.focusForeground\": \"#d4d4d4\",\n                \"sash.hoverBorder\": \"#4d057b\",\n                \"scrollbar.shadow\": \"#160024\",\n                \"scrollbarSlider.activeBackground\": \"#7d16bfa0\",\n                \"scrollbarSlider.background\": \"#7d16bf50\",\n                \"scrollbarSlider.hoverBackground\": \"#7d16bf80\",\n                \"selection.background\": \"#9039c7\",\n                \"settings.checkboxBackground\": \"#350354\",\n                \"settings.checkboxBorder\": \"#350354\",\n                \"settings.dropdownBackground\": \"#350354\",\n                \"settings.dropdownBorder\": \"#350354\",\n                \"settings.headerForeground\": \"#d4d4d4\",\n                \"settings.numberInputBackground\": \"#350354\",\n                \"settings.numberInputBorder\": \"#350354\",\n                \"settings.textInputBackground\": \"#350354\",\n                \"settings.textInputBorder\": \"#350354\",\n                \"sideBar.background\": \"#25013c\",\n                \"sideBarSectionHeader.background\": \"#4d057b\",\n                \"statusBar.background\": \"#7d16bf\",\n                \"statusBar.border\": \"#7d16bf\",\n                \"statusBar.debuggingBackground\": \"#9716bf\",\n                \"statusBar.debuggingBorder\": \"#9716bf\",\n                \"statusBar.noFolderBackground\": \"#7d16bf\",\n                \"statusBarItem.remoteBackground\": \"#9333dc\",\n                \"statusBarItem.remoteForeground\": \"#ffffff\",\n                \"tab.activeBackground\": \"#7d16bf\",\n                \"tab.activeBorder\": \"#b133ff\",\n                \"tab.unfocusedActiveBorder\": \"#9039c7\",\n                \"tab.border\": \"#4d057b\",\n                \"tab.inactiveBackground\": \"#4d057b\",\n                \"tab.inactiveForeground\": \"#ffffff80\",\n                \"tab.unfocusedInactiveForeground\": \"#ffffff66\",\n                \"tab.unfocusedActiveForeground\": \"#ffffff80\",\n                \"terminal.background\": \"#160024\",\n                \"terminal.foreground\": \"#d4d4d4\",\n                \"terminalStickyScrollHover.background\": \"#4d057b60\",\n                \"textBlockQuote.background\": \"#d4d4d41a\",\n                \"textBlockQuote.border\": \"#d4d4d440\",\n                \"textCodeBlock.background\": \"#d4d4d41a\",\n                \"textLink.activeForeground\": \"#ba7dd9\",\n                \"textLink.foreground\": \"#ba7dd9\",\n                \"titleBar.activeBackground\": \"#7d16bf\",\n                \"titleBar.inactiveBackground\": \"#4d057b\",\n                \"widget.border\": \"#4d057b\",\n                \"widget.shadow\": \"#4d057b60\",\n                \"window.activeBorder\": \"#7d16bf\",\n                \"window.inactiveBorder\": \"#4d057b\",\n                'editor.background': '#00000000',\n                // 'editor.lineHighlightBackground': '#3f1e84',\n                'editor.focusBorder': 'none'\n            },\n        });\n\n    \n        editor = monaco.editor.create(document.querySelector(`.window[directory='${normalizePath(directory)}']`), {\n            value: content,\n            language: language,\n            theme: \"custom\",\n            automaticLayout: true,\n            focusBorder: false,\n            overviewRulerBorder: false,\n            readOnly: false,\n            folding: true,\n            minimap: {\n                enabled: false,\n            },\n            editorStickyScroll: false,\n            suggestOnTriggerCharacters: true,\n            tabCompletion: 'on',\n            parameterHints: {\n                enabled: false,\n            },\n            quickSuggestions: {\n                comments: true,\n                other: true,\n                strings: true,\n            },\n        });\n\n\n        editor.addAction({\n            id: 'complete-code-button',\n            label: 'Complete Code',\n            contextMenuGroupId: 'navigation',\n            contextMenuOrder: 1,\n            run: async function(ed) {\n                const currentPosition = editor.getPosition();\n                const model = editor.getModel();\n                const decorations = editor.getLineDecorations(currentPosition.lineNumber);\n\n                if (decorations.length > 0) {\n                    const range = model.getDecorationRange(decorations[0].id);\n                    if (range) {\n                        const newEndLineNumber = range.endLineNumber;\n\n                        const upperRange = new monaco.Range(\n                            range.startLineNumber,\n                            1,\n                            newEndLineNumber,\n                            range.endColumn\n                        );\n\n                        const selectedText = model.getValueInRange(upperRange);\n\n                        console.log(selectedText);\n\n                        const result = await window.pywebview.api.complete_code(selectedText);\n\n                        const selectionRange = new monaco.Range(\n                            currentPosition.lineNumber + 1,\n                            1,\n                            currentPosition.lineNumber + 1,\n                            1\n                        );\n\n                        model.pushEditOperations(\n                            [selectionRange],\n                            [{\n                                range: selectionRange,\n                                text: result + \"\\n\",\n                                forceMoveMarkers: true\n                            }],\n                            () => null\n                        );\n                    }\n                }\n            }\n        });\n\n        editor.addAction({\n            id: 'ask-to-ai-button',\n            label: 'Ask to AI',\n            contextMenuGroupId: 'navigation',\n            contextMenuOrder: 1,\n            run: function(ed) {\n                openChatPanel();\n            }\n        });\n        \n\n        editors.push({\n            directory: directory,\n            editor: editor\n        });\n\n        editorStates.push({\n            directory: directory,\n            content: editor.getValue(),\n            cursor: editor.getPosition(),\n            scrollTop: editor.getScrollTop(),\n            scrollLeft: editor.getScrollLeft(),\n        });\n\n        pywebview.api.save_editors(editorStates);\n\n        let timeout;\n\n        editor.onDidChangeModelContent(async (event) => {\n        \n            // Update the unsaved sign\n            document.querySelector(`.file-bottom[directory='${directory}'] .unsaved-sign`).style.opacity = '1';\n            document.querySelector(`.file-bottom[directory='${directory}']`).setAttribute('unsaved', '');\n\n            for (let i = 0; i < editorStates.length; i++) {\n                if (editorStates[i].directory === directory) {\n                    editorStates[i].content = editor.getValue();\n                    editorStates[i].cursor = editor.getPosition();\n                    editorStates[i].scrollTop = editor.getScrollTop();\n                    editorStates[i].scrollLeft = editor.getScrollLeft();\n                    pywebview.api.save_editors(editorStates);\n                    break;\n                }\n            }\n\n            if(timeout){\n                clearTimeout(timeout);\n            }\n\n            timeout = setTimeout(() => {\n                const currentPosition = editor.getPosition();\n                const model = editor.getModel();\n                const decorations = editor.getLineDecorations(currentPosition.lineNumber);\n\n                if (decorations.length > 0) {\n                    const range = model.getDecorationRange(decorations[0].id);\n                    if (range) {\n                        const newEndLineNumber = range.endLineNumber;\n\n                        const upperRange = new monaco.Range(\n                            range.startLineNumber,\n                            1,\n                            newEndLineNumber,\n                            range.endColumn\n                        );\n\n                        const selectedText = model.getValueInRange(upperRange);\n\n                        // window.pywebview.api.answer_prompt(selectedText).then(response => {\n                        //     sendAnswerPopup(response);\n                        // });\n                    }\n                }\n            }, 2000); \n        });\n\n        editor.onDidChangeCursorPosition((e) => {\n            for(let i = 0; i < editorStates.length; i++) {\n                if(editorStates[i].directory === directory){\n                    editorStates[i].cursor = editor.getPosition();\n                    editorStates[i].scrollTop = editor.getScrollTop();\n                    editorStates[i].scrollLeft = editor.getScrollLeft();\n                    pywebview.api.save_editors(editorStates);\n                    break;\n                }\n            }\n        });\n          \n        // editor.onDidScrollChange((e) => {\n        //     for(let i = 0; i < editorStates.length; i++) {\n        //         if(editorStates[i].directory === directory){\n        //             editorStates[i].scrollTop = editor.getScrollTop();\n        //             editorStates[i].scrollLeft = editor.getScrollLeft();\n        //             pywebview.api.save_editors(editorStates);\n        //             break;\n        //         }\n        //     }\n        // });\n    });\n}\n\n",
                    "cursor": {
                        "lineNumber": 4,
                        "column": 1
                    },
                    "scrollTop": 0,
                    "scrollLeft": 0
                },
                {
                    "directory": "C:/Users/Eren/Desktop/pywebview-monaco-ide/deneme.js",
                    "content": "f",
                    "cursor": {
                        "lineNumber": 1,
                        "column": 2
                    },
                    "scrollTop": 0,
                    "scrollLeft": 0
                }
            ]
        },
        {
            "directory": "C:\\Users\\Eren\\Desktop\\yuz-tanima-muti-main",
            "bottom_files": [],
            "current_file": null,
            "anchor_file": null,
            "editors": []
        }
    ]
}